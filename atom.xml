<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHZ0325&#39;s Space</title>
  
  <subtitle>只有翻过这座山才能让他们听到你的故事</subtitle>
  <link href="https://whz0325.github.io/atom.xml" rel="self"/>
  
  <link href="https://whz0325.github.io/"/>
  <updated>2023-03-12T11:49:40.201Z</updated>
  <id>https://whz0325.github.io/</id>
  
  <author>
    <name>WHZ0325</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【CSP 2022】聚集方差</title>
    <link href="https://whz0325.github.io/csp-202212-4/"/>
    <id>https://whz0325.github.io/csp-202212-4/</id>
    <published>2023-03-12T11:14:00.000Z</published>
    <updated>2023-03-12T11:49:40.201Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一棵 $n$ 个节点的树，记以节点 $x$ 为根的子树组成集合为 $T(x)$，求 $\sum_{y\in T(x)}\min_{z\in T(x),z\neq y}(a_z-a_y)^2$。</p><p>$2\le n\le 3\times 10^5$，$0\le a_i\le 10^9$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>思维难度其实不大，对每个节点开一个集合，树上启发式合并就可以了。</p><p>怎么合并呢？不难发现插入新元素时会影响到的只有与它距离最近的两个节点的贡献，动态维护即可。</p><p>时间复杂度大概是 $O(nlog_2^2n)$。</p><p>题目的坑点在于卡常。</p><p>第一次是用 <code>multiset</code> 实现的，直接卡成 40 分的暴力，后来改成 <code>map</code> 变成 55 分（$a_i$ 值相同的点合并为一个），又优化了一下，把所有二分操作合并为一个才 A 掉。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">16</span>], *fs = buf, *ft = buf;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fs == ft) ft = (fs = buf) + <span class="built_in">fread</span>(buf, <span class="number">1</span>, <span class="number">1</span>&lt;&lt;<span class="number">16</span>, stdin);</span><br><span class="line">    <span class="keyword">return</span> *fs++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;num)</span> </span>&#123;</span><br><span class="line">    num = <span class="number">0</span>; c = <span class="built_in">gc</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        num = (num &lt;&lt; <span class="number">3</span>) + (num &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">gc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, a[N], id[N]; ll res[N], ans[N];</span><br><span class="line">std::map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; s[N];</span><br><span class="line">std::vector&lt;<span class="keyword">int</span>&gt; son[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getDist</span><span class="params">(<span class="keyword">int</span> o, std::map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[o].<span class="built_in">size</span>() == <span class="number">1</span> || it-&gt;second &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = INT_MAX, x = it-&gt;first;</span><br><span class="line">    <span class="keyword">if</span>(it != s[o].<span class="built_in">begin</span>()) &#123;</span><br><span class="line">        --it;</span><br><span class="line">        ans = std::<span class="built_in">min</span>(ans, <span class="built_in">abs</span>(x - it-&gt;first));</span><br><span class="line">        ++it;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((++it) != s[o].<span class="built_in">end</span>()) ans = std::<span class="built_in">min</span>(ans, <span class="built_in">abs</span>(x - it-&gt;first));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s[y].<span class="built_in">size</span>() &gt; s[x].<span class="built_in">size</span>()) std::<span class="built_in">swap</span>(x, y);</span><br><span class="line">    std::map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it = s[y].<span class="built_in">begin</span>(); it != s[y].<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        std::map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it0 = s[x].<span class="built_in">lower_bound</span>(it-&gt;first);</span><br><span class="line">        <span class="keyword">if</span>(it0 != s[x].<span class="built_in">end</span>() &amp;&amp; it0-&gt;first == it-&gt;first) &#123;</span><br><span class="line">            <span class="keyword">int</span> oldDist = <span class="built_in">getDist</span>(x, it0);</span><br><span class="line">            res[x] -= (ll)oldDist * oldDist;</span><br><span class="line">            s[x][it-&gt;first] += it-&gt;second;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nearest = it-&gt;second &gt; <span class="number">1</span> ? <span class="number">0</span> : INT_MAX;</span><br><span class="line">        <span class="keyword">if</span>(it0 != s[x].<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> newDist = <span class="built_in">abs</span>(it-&gt;first - it0-&gt;first);</span><br><span class="line">            <span class="keyword">if</span>(s[x][it0-&gt;first] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> oldDist = <span class="built_in">getDist</span>(x, it0);</span><br><span class="line">                <span class="keyword">if</span>(s[x].<span class="built_in">size</span>() == <span class="number">1</span> || oldDist &gt; newDist) &#123;</span><br><span class="line">                    res[x] -= (ll)oldDist * oldDist;</span><br><span class="line">                    res[x] += (ll)newDist * newDist;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nearest = std::<span class="built_in">min</span>(nearest, newDist);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(it0 != s[x].<span class="built_in">begin</span>()) &#123;</span><br><span class="line">            --it0;</span><br><span class="line">            <span class="keyword">int</span> newDist = <span class="built_in">abs</span>(it-&gt;first - it0-&gt;first);</span><br><span class="line">            <span class="keyword">if</span>(s[x][it0-&gt;first] == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> oldDist = <span class="built_in">getDist</span>(x, it0);</span><br><span class="line">                <span class="keyword">if</span>(s[x].<span class="built_in">size</span>() == <span class="number">1</span> || oldDist &gt; newDist) &#123;</span><br><span class="line">                    res[x] -= (ll)oldDist * oldDist;</span><br><span class="line">                    res[x] += (ll)newDist * newDist;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            nearest = std::<span class="built_in">min</span>(nearest, newDist);</span><br><span class="line">        &#125;</span><br><span class="line">        res[x] += (ll)nearest * nearest;</span><br><span class="line">        s[x][it-&gt;first] += it-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ans[x] = <span class="number">0</span>; ++s[x][a[x]]; id[x] = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, end = son[x].<span class="built_in">size</span>(); i &lt; end; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = son[x][i];</span><br><span class="line">        <span class="built_in">calc</span>(v);</span><br><span class="line">        id[x] = <span class="built_in">merge</span>(id[x], id[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans[x] = res[id[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> p; <span class="built_in">read</span>(p);</span><br><span class="line">        son[p].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给你一棵 $n$ 个节点的树，记以节点 $x$ 为根的子树组成集合为 $T(x)$，求 $\sum_{y\in T(x)}\</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="启发式合并" scheme="https://whz0325.github.io/tags/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>【POJ 1064】Cable master</title>
    <link href="https://whz0325.github.io/poj-1064/"/>
    <id>https://whz0325.github.io/poj-1064/</id>
    <published>2023-03-08T02:20:00.000Z</published>
    <updated>2023-03-08T05:35:35.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 $n$ 条长度分别为 $a_i$ 的绳子，求切出 $k$ 条完整绳子的最大长度。</p><p>$1\le n\le 10^4$，$1\le k\le 10^4$，$a_i$ 有两位小数。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>二分答案，在长度为 $d$ 时能切出 $k$ 条完整的绳子显然在长度小于 $d$ 时也能做到，答案具有单调性。</p><p>重点是实现时考虑浮点运算精度问题，刚开始注意到 <code>printf</code> 在保留位数是会自动四舍五入，为了得到舍掉两位小数后的全部低位，在结果最后额外减去了 $0.005$，然而依然有浮点误差。</p><p>索性用整数实现，很快就解决了hhh，详细见代码。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>C++ 实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10005</span></span><br><span class="line"><span class="keyword">int</span> n,k,a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) cnt+=a[i]/d;</span><br><span class="line">    <span class="keyword">return</span> cnt&gt;=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;<span class="keyword">double</span> d;<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;d);r=std::<span class="built_in">max</span>(r,a[i]=d*<span class="number">100</span>);&#125;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d.%02d\n&quot;</span>,l/<span class="number">100</span>,l%<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cnt += a[i] / d;</span><br><span class="line">        <span class="keyword">return</span> cnt &gt;= k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        k = in.nextInt();</span><br><span class="line">        a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = in.nextDouble();</span><br><span class="line">            a[i] = (<span class="keyword">int</span>)(<span class="number">100.0</span> * d);</span><br><span class="line">            r = Math.max(r, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(check(mid)) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%d.%02d\n&quot;</span>,l / <span class="number">100</span>, l % <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定 $n$ 条长度分别为 $a_i$ 的绳子，求切出 $k$ 条完整绳子的最大长度。&lt;/p&gt;
&lt;p&gt;$1\le n\le </summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="二分法" scheme="https://whz0325.github.io/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何在 macOS 下配置 Sublime Text 的可交互 Java 环境</title>
    <link href="https://whz0325.github.io/sublime-text-runs-java-on-macos/"/>
    <id>https://whz0325.github.io/sublime-text-runs-java-on-macos/</id>
    <published>2023-01-24T16:59:00.000Z</published>
    <updated>2023-01-25T02:19:56.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为报名了某个用到 Java 语言的程序设计竞赛，就想配置一个像之前用 C++ 时那样的 Sublime Text 快速编程环境，网上没有找到详细又简单的解决方案，于是花了些时间自己尝试了一个有些简陋的实现。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p><img src="../images/upload/sublime-text-runs-java-on-macos/1.png"></p><p>在 Sublime Text 3 中新建 Build System，命名为 <code>Java Terminal.sublime-build</code>，写入如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;cmd&quot;</span>: [<span class="string">&quot;zsh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;javac &#x27;$&#123;file_name&#125;&#x27;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;file_regex&quot;</span>: <span class="string">&quot;^(...*?):([0-9]*):?([0-9]*)&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;selector&quot;</span>: <span class="string">&quot;source.java&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;variants&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Run&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;shell&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;cmd&quot;</span>: [<span class="string">&quot;echo \&quot;cd &#x27;$&#123;file_path&#125;&#x27; &amp;&amp; javac &#x27;$&#123;file_name&#125;&#x27; &amp;&amp; java &#x27;$&#123;file_base_name&#125;&#x27; &amp;&amp; rm run.sh\&quot; &gt; run.sh &amp;&amp; chmod ugo+x run.sh &amp;&amp; open -a Terminal.app ./run.sh&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/upload/sublime-text-runs-java-on-macos/2.png"></p><p>保存后即可用 <code>Command+B</code> 选取 <code>Java Terminal - Run</code> 运行测试。</p><p><img src="../images/upload/sublime-text-runs-java-on-macos/3.png"></p><p>对 macOS 下的一些参数不是很了解，所以这里的实现思路为：</p><ul><li>将要执行的命令写入 <code>run.sh</code>。</li><li>调用 Terminal 运行 <code>run.sh</code>。</li><li>在 <code>run.sh</code> 中执行 <code>javac</code> 和 <code>java</code> 命令，在程序执行完毕后删除 <code>run.sh</code>。</li></ul><p>撒花！🎉</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>又熬夜了。。。</p><p>另：修改了调用文件路径和文件名的格式防止出现存放在某些包含空格的路径就会出错的问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;因为报名了某个用到 Java 语言的程序设计竞赛，就想配置一个像之前用 C++ 时那样的 Sublime Text 快速编程环境，网上没有找</summary>
      
    
    
    
    <category term="日志" scheme="https://whz0325.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="Java" scheme="https://whz0325.github.io/tags/Java/"/>
    
    <category term="macOS" scheme="https://whz0325.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>在 macOS 系统中移除 Nix</title>
    <link href="https://whz0325.github.io/remove-nix-from-macos/"/>
    <id>https://whz0325.github.io/remove-nix-from-macos/</id>
    <published>2023-01-20T11:54:00.000Z</published>
    <updated>2023-01-20T12:49:53.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这两天想安装 Nix 用于处理一个转 midi 的程序，结果由于网络问题没完全安装成，卸载的过程比较艰难所以记录一下。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>在 <a href="https://github.com/NixOS/nix/issues/458">GitHub</a> 上找到了一个相关问题，链接到了一个<a href="https://iohk.zendesk.com/hc/en-us/articles/4415830650265-Uninstall-nix-on-MacOS">一年前的教程</a>，虽然有点复杂，但是打算参照这个教程试试看。</p><p>第一步，前往 <code>/etc/</code> 这个目录，可以看到存在教程中提到的 <code>zshrc.backup-before-nix</code> 和 <code>bashrc.backup-before-nix</code> 两个文件，直接用它们覆盖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/zshrc.backup-before-nix /etc/zshrc</span><br><span class="line">sudo mv /etc/bashrc.backup-before-nix /etc/bashrc</span><br></pre></td></tr></table></figure><p>第二步，在终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vifs</span><br></pre></td></tr></table></figure><p>可以看到注释下面有一行与 Nix 相关，直接在 Vim 删去（$6$ 是行号）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:6d</span><br></pre></td></tr></table></figure><p>第三步，打开 <code>/etc/synthetic.conf</code>，里面只有一行，与 Nix 相关，按照教程直接删去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/synthetic.conf</span><br></pre></td></tr></table></figure><p>第四步，与教程略有不同，可能是我没安装完全的缘故，前往 <code>/Library/LaunchDaemons</code> 目录（注意比教程中多了个 <code>s</code>），看到有一个 <code>org.nixos</code> 开头的列表项，删除它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl unload /Library/LaunchDaemons/org.nixos.xxx.plist</span><br><span class="line">sudo rm /Library/LaunchDaemons/org.nixos.xxx.plist</span><br></pre></td></tr></table></figure><p>第五步，复制命令，移除所有相关文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /etc/nix /var/root/.nix-profile /var/root/.nix-defexpr /var/root/.nix-channels ~/.nix-profile ~/.nix-defexpr ~/.nix-channels</span><br></pre></td></tr></table></figure><p>第六步，继续在终端中复制命令执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dscl . delete /Groups/nixbld</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 1 32); <span class="keyword">do</span> sudo dscl . -delete /Users/_nixbld<span class="variable">$i</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>最后一步，与教程中有所不同，参考 GitHub 上的方案，先重新启动，再执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo diskutil apfs deleteVolume /Volumes/Nix\ Store</span><br><span class="line">sudo rm -rf /nix/</span><br></pre></td></tr></table></figure><p>重新启动，撒花！🎉</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>必应 yyds！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;这两天想安装 Nix 用于处理一个转 midi 的程序，结果由于网络问题没完全安装成，卸载的过程比较艰难所以记录一下。&lt;/p&gt;
&lt;h3 id</summary>
      
    
    
    
    <category term="日志" scheme="https://whz0325.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="macOS" scheme="https://whz0325.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Java 语法笔记</title>
    <link href="https://whz0325.github.io/java-notes/"/>
    <id>https://whz0325.github.io/java-notes/</id>
    <published>2023-01-11T06:32:06.000Z</published>
    <updated>2023-03-10T15:26:04.050Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h3><p>写这篇笔记时 Oracle 官网上的最新的 JDK 版本是 Java 19，兼容 Apple Silicon，然而目前最常用的 Java 8 和 Java 11 还没有适配，可以使用 Zulu JDK，关于如何配置 Sublime Text 3 快速编写简单的 Java 程序可以参考 <a href="./sublime-text-runs-java-on-macos">如何在 macOS 下配置 Sublime Text 的可交互 Java 环境</a>，集成开发环境推荐 IntelliJ IDEA。</p><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><h5 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//注意分号</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(in.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>in.next()</code>：读入一个字符串。</p><p><code>in.nextLine()</code>：读入一行，返回一个字符串。</p><p>可以使用 <code>hasNextInt()</code> 等方法来预判（以通过 <code>while</code> 循环读取任意数量的数据）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">if</span>(in.hasNextInt()) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = in.nextInt();</span><br><span class="line">            System.out.printf(<span class="string">&quot;The next integer is %d.\n&quot;</span>,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> System.out.println(<span class="string">&quot;The next integer does not exist.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">3.14</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">The next integer does not exist.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">The next integer is 3.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h5><p>关于字节流和字符流相关：待填坑。（StreamTokenizer）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">        Integer n = Integer.parseInt(in.readLine());<span class="comment">// read() 方法读取字符</span></span><br><span class="line">        out.write(n.toString());<span class="comment">// 可以使用 String.format(&quot;&quot;) 方法</span></span><br><span class="line">        out.newLine();</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">1024</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">1024</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>导入 <code>java.io.*</code>，主函数 <code>throws IOException</code>。</li><li><code>BufferedReader</code> 和 <code>BufferedWriter</code> 使用 <code>InputStreamReader</code> 和 <code>OutputStreamWriter</code> 初始化。</li><li>输出后刷新缓冲区 <code>flush()</code>。</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>基本数据类型（如 <code>int</code>、<code>double</code>）及强制类型转换，语法与 C++ 类似，但布尔类型的关键字为 <code>boolean</code>。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h5 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h5><p>定义数组：<code>int[] a = new int[100];</code>，数组的元素个数可以为变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            System.out.print(a[i] + ((i == n - <span class="number">1</span>)?<span class="string">&quot;\n&quot;</span>:<span class="string">&quot; &quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：10</span></span><br><span class="line"><span class="comment">输出：0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可以使用 <code>a.length</code> 访问数组大小，数组中元素默认为 $0$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; ++i) a[i] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; ++i) &#123;</span><br><span class="line">            System.out.print(a[i] + ((i == n - <span class="number">1</span>)?<span class="string">&quot;\n&quot;</span>:<span class="string">&quot; &quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：10</span></span><br><span class="line"><span class="comment">输出：0 1 2 3 4 0 0 0 0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>初始化：<code>int[] a = &#123;0, 1, 2, 3, 4, 5&#125;;</code>。</p><h5 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = in.nextInt(), m = in.nextInt();</span><br><span class="line"><span class="comment">/* 使用变量定义二维数组 */</span></span><br><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, cnt = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">        a[i][j] = cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 使用 for-each 访问二维数组 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>[] b: a) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c: b) &#123;</span><br><span class="line">        System.out.print(c + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化 */</span></span><br><span class="line"><span class="keyword">int</span>[][] a = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 使用 length 访问二维数组 */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].length; ++j) &#123;</span><br><span class="line">        a[i][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h5><ol><li>引入：<code>import java.util.Arrays;</code></li><li>基本用法：<code>Arrays.sort(a);</code> 对数组 <code>a</code> 进行递增排序。</li><li>时间复杂度：$O(nlog_2n)$。</li><li>指定排序范围：<code>Arrays.sort(a, 0, 5);</code> 对数组 <code>a</code> 的前 6 个元素进行排序。</li><li>自定义排序规则：</li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>用法与 C++ 类似。</p><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p><code>if</code> 语句和 <code>switch</code> 语句与 C++ 类似。</p><p>就近原则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>()</span><br><span class="line">    <span class="keyword">if</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，第一部分代码中的 <code>else</code> 无视缩进，与第二个 <code>if</code> 形成一组。</p><p><code>switch</code> 语句中的 <code>default</code> 不是必要的。</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p><code>while</code> 语句和 <code>do-while</code> 语句与 C++ 类似。</p><p><code>for</code> 语句与 C++ 类似，可使用 <code>break</code> 语句和 <code>continue</code> 语句，也可以使用 <code>goto</code>。</p><p>类似 <code>for-in</code> 的 <code>for-each</code> 遍历数组元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x: a) &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，上述代码中改变 <code>x</code> 的值并不会改变原数组中对应项的值（类数组除外），例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            a[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x: a) &#123;</span><br><span class="line">            x = <span class="number">0</span>;<span class="comment">// 原数组中的值没有被修改</span></span><br><span class="line">            System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x: a) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">0 1 2 3 4 5 6 7 8 9 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h5 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h5><p>Java 使用 Unicode 编码，用单引号表示字符，可与 <code>int</code> 相互赋值。</p><p>转义字符：<code>\t</code>、<code>\b</code>、<code>\n</code>、<code>\r</code>、<code>\\</code>、<code>\&#39;</code>、<code>\&quot;</code>……</p><h5 id="Wrap-类型"><a href="#Wrap-类型" class="headerlink" title="Wrap 类型"></a>Wrap 类型</h5><p>将基本类型转化为对象，</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首字母大写</span></span><br><span class="line"><span class="keyword">int</span> -&gt; Integer</span><br><span class="line"><span class="keyword">short</span> -&gt; <span class="keyword">Short</span></span><br><span class="line"><span class="keyword">long</span> -&gt; <span class="keyword">Long</span></span><br><span class="line"><span class="keyword">float</span> - &gt; <span class="keyword">Float</span></span><br><span class="line"><span class="keyword">double</span> -&gt; <span class="keyword">Double</span></span><br><span class="line"><span class="keyword">boolean</span> -&gt; <span class="keyword">Boolean</span></span><br><span class="line"><span class="keyword">char</span> -&gt; Charater</span><br><span class="line"><span class="keyword">byte</span> -&gt; <span class="keyword">Byte</span></span><br></pre></td></tr></table></figure><p><code>Integer.parseInt(String s, int radix)</code> 方法可以将字符串转化为整数，<code>radix</code> 参数用于指定基数，默认为 10。</p><p>类似的还有 <code>Long.parseLong(String s)</code>、<code>Double.parseDouble(String s)</code> 等等。</p><h5 id="Integer-类型"><a href="#Integer-类型" class="headerlink" title="Integer 类型"></a>Integer 类型</h5><p>可自由赋值给 int 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Integer I = Integer(<span class="number">1024</span>);<span class="comment">// Java 8</span></span><br><span class="line">Integer I = Integer.valueOf(<span class="number">1024</span>);<span class="comment">// Java 19</span></span><br><span class="line">System.out.println(I);</span><br><span class="line"><span class="keyword">int</span> i = I;</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">1024</span></span><br><span class="line"><span class="comment">1024</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(Integer.MIN_VALUE + <span class="string">&quot; &quot;</span> + Integer.MAX_VALUE);</span><br><span class="line"><span class="comment">// 输出：-2147483648 2147483647</span></span><br></pre></td></tr></table></figure><p>成员函数 <code>toString()</code> 和 <code>Integer.toString(int i)</code> 方法可返回整数对应的字符串。</p><h5 id="Character-类型"><a href="#Character-类型" class="headerlink" title="Character 类型"></a>Character 类型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">System.out.println(Character.isDigit(c));</span><br><span class="line">System.out.println(Character.isLetter(c));</span><br><span class="line">System.out.println(Character.isLetterOrDigit(c));</span><br><span class="line">System.out.println(Character.isLowerCase(c));</span><br><span class="line">System.out.println(Character.isUpperCase(c));</span><br><span class="line">System.out.println(Character.isWhitespace(c));</span><br><span class="line">System.out.println(Character.toLowerCase(c));<span class="comment">// 返回改变后的字符，不改变 c 的值</span></span><br><span class="line">System.out.println(Character.toUpperCase(c));<span class="comment">// 返回改变后的字符，不改变 c 的值</span></span><br></pre></td></tr></table></figure><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><p>字符串的连接是从左向右的，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;3&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">33</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(<span class="string">&quot;1&quot;</span> + <span class="number">2</span> + <span class="number">3</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>判断相等时应当使用 <code>s1.equals(s2)</code>，在 Java 中，类的名称类似于指针，使用运算符 <code>==</code> 相当于判断两者是否指向同一对象。</p><p>两种声明方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">String s = <span class="string">&quot;Hello World!&quot;</span>;</span><br></pre></td></tr></table></figure><p>这两种初始化的方式是有所不同的，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>可见，使用 <code>new</code> 初始化相同内容的字符串时创建了新的对象，这里用到了 Java 中“常量池”的概念。</p><p>注意：在 Java 中采用值传递而非引用传递。</p><p>一些函数的用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* compareTo() 在小于时返回 -1，等于时返回 0，大于时返回 1. */</span></span><br><span class="line"><span class="comment">/* compareToIgnoreCase() 无视大小写 */</span></span><br><span class="line">String s1 = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;BCD&quot;</span>;</span><br><span class="line">System.out.println(s1.compareTo(s2));<span class="comment">// -1</span></span><br><span class="line"><span class="comment">/* charAt() */</span></span><br><span class="line">System.out.println(s1.charAt(<span class="number">0</span>));<span class="comment">// A</span></span><br><span class="line"><span class="comment">/* substring() */</span></span><br><span class="line">System.out.println(s1.substring(<span class="number">1</span>));<span class="comment">// BC</span></span><br><span class="line"><span class="comment">/* 区间左闭右开 */</span></span><br><span class="line">System.out.println(s1.substring(<span class="number">0</span>, <span class="number">2</span>));<span class="comment">// AB</span></span><br><span class="line"><span class="comment">/* indexOf() 不存在返回 -1 */</span></span><br><span class="line">System.out.println(s1.indexOf(<span class="string">&#x27;B&#x27;</span>));<span class="comment">// 1</span></span><br><span class="line">System.out.println(s1.indexOf(<span class="string">&#x27;Z&#x27;</span>));<span class="comment">// -1</span></span><br><span class="line"><span class="comment">/* 第二个参数表示查找的开始位置 */</span></span><br><span class="line">System.out.println(s1.indexOf(<span class="string">&#x27;A&#x27;</span>, <span class="number">1</span>));<span class="comment">// -1</span></span><br><span class="line"><span class="comment">/* lastIndexOf 用法相同，从字符串末尾开始搜索 */</span></span><br><span class="line"><span class="comment">/* 其它函数 */</span></span><br><span class="line">System.out.println(s1.startsWith(<span class="string">&quot;AB&quot;</span>));<span class="comment">// true</span></span><br><span class="line">System.out.println(s1.endsWith(<span class="string">&quot;BA&quot;</span>));<span class="comment">// true</span></span><br><span class="line"><span class="comment">/* trim() 删去头尾空白符 */</span></span><br><span class="line">s1 = <span class="string">&quot; ABABA &quot;</span>;</span><br><span class="line">System.out.println(s1.trim());<span class="comment">// &quot;ABABA&quot;</span></span><br><span class="line">System.out.println(s1.replace(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>));<span class="comment">// CBCBC</span></span><br><span class="line">System.out.println(s1.toLowerCase());<span class="comment">// ababa</span></span><br><span class="line"><span class="comment">/* 执行 toLowerCase() 和 toUpperCase() 不改变原字符串的内容 */</span></span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = in.next();</span><br><span class="line"><span class="keyword">switch</span>(s) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Happy&quot;</span>: System.out.println(<span class="string">&quot;You are happy.&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;Sad&quot;</span>: System.out.println(<span class="string">&quot;You are sad.&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另：可使用 <code>indexOf</code> 进行字符串查找，内部实现为嵌套循环的朴素算法，时间复杂度为 $O(nm)$，但只能返回一个位置，却可以指定查找的起始位置来实现连续查找。</p><p>未初始化的 String 不能调用 <code>length()</code> 方法，而初始化为 <code>&quot;&quot;</code> 的 String 调用 <code>length()</code> 会返回数字 0。</p><p><code>split</code> 方法可以对字符串进行拆分，得到拆分后的字符串数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str = in.nextLine();</span><br><span class="line">        String s[] = str.split(<span class="string">&quot; &quot;</span>);<span class="comment">// 也可以使用 &quot;,&quot; 作为分隔符</span></span><br><span class="line">        <span class="keyword">for</span>(String ss: s) &#123;</span><br><span class="line">            System.out.println(ss);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">Hello World Java Programming File</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">Hello</span></span><br><span class="line"><span class="comment">World</span></span><br><span class="line"><span class="comment">Java</span></span><br><span class="line"><span class="comment">Programming</span></span><br><span class="line"><span class="comment">File</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><code>format</code> 方法可以获得格式化的字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">double</span> d = in.nextDouble();</span><br><span class="line">        String s = String.format(<span class="string">&quot;Double Value is %.7f\n&quot;</span>,d);</span><br><span class="line">        System.out.print(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">3.1415926</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">Double Value is 3.1415926</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>（Java 中 <code>float</code> 类型和 <code>double</code> 类型变量都使用 <code>%f</code> 表示，<code>byte</code> 类型、<code>short</code> 类型、<code>int</code> 类型、<code>long</code> 类型都使用 <code>%d</code> 表示）</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>只能按值传递。</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>调用成员函数时可以直接使用成员变量名或成员函数名，可不使用 <code>this</code> 指定（若与成员函数某个参数重名则须要指定），<code>this</code> 像指针一样管理着调用成员函数的对象（就像一个快捷方式 ）。  </p><p>成员变量会被给予初始值 $0$，与本地变量（函数中的变量）不同，本地变量不被赋值就使用则编译失败。</p><p>创建对象的时候会对所有变量依次初始化，然后调用构造函数（如果存在的话），若有多个构造函数则调用与 <code>new</code> 时参数对应的构造函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;<span class="comment">// 0</span></span><br><span class="line">    test() &#123;&#125;<span class="comment">// 构造函数，使用类名，没有返回类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        System.out.println(x);<span class="comment">// 1</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.x);<span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test t = <span class="keyword">new</span> test();t.f(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在构造函数中使用 <code>this</code> 调用其它构造函数，例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    int x;</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params"></span>)</span> &#123;System.out.println(<span class="string">&quot;test&quot;</span>);&#125;</span><br><span class="line">    <span class="function"><span class="title">test</span>(<span class="params">int x</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span> &#123;</span><br><span class="line">        test t = <span class="keyword">new</span> test(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是 <code>this()</code> 只能作为该构造函数的第一个语句，否则就会报错：</p><p><img src="../images/upload/java-notes/error0.png"></p><h5 id="private-属性"><a href="#private-属性" class="headerlink" title="private 属性"></a>private 属性</h5><p><code>private</code> 关键字只适用于成员变量和成员函数，仅类中可使用，在类外实例化的对象不可访问（但对于同一个类的私有成员变量，只要代码写在类中，两个不同的对象之间可以相互访问）。</p><h5 id="public-属性"><a href="#public-属性" class="headerlink" title="public 属性"></a>public 属性</h5><p><code>public</code> 关键字修饰的类必须在它自己的 <code>java</code> 文件中，即文件名与类名相同。</p><h5 id="包"><a href="#包" class="headerlink" title="包"></a>包</h5><p>若成员变量、成员函数和类前没有 <code>private</code> 或 <code>public</code> 关键字，则意味着它仅可以在包内访问。</p><p>在 <code>java</code> 文件的开头添加 <code>package package_name;</code> 表明文件属于这个包。</p><p>导入其它包内声明的类：<code>import package_name.class_name;</code>，不选择导入则需要使用 <code>package_name.class_name</code> 作为全名调用包外的类。</p><p><code>import package_name.*;</code> 表明导入包内的所有内容。</p><p>包可以嵌套子目录：<code>package parent.child</code>。</p><h5 id="Static-属性"><a href="#Static-属性" class="headerlink" title="Static 属性"></a>Static 属性</h5><p>同一个类的静态变量为所有对象共有，可以使用 <code>object_name.var_name</code> 也可以使用 <code>class_name.var_name</code> 访问，可以称为类变量。</p><p>静态函数（用 <code>static</code> 修饰的属性的函数）与静态变量类似，静态函数不能访问成员变量（因为静态函数属于这个类，而成员变量属于一个特定的对象）。</p><h5 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h5><p>如 <code>ArrayList&lt;String&gt; arr = new ArrayList&lt;String&gt;();</code>，声明 String 类型的容器。</p><p><font color="red">注意：Java 中泛型只能是引用类型（如 <code>Integer</code>），不能是基本类型（如 <code>int</code>）。</font></p><h5 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h5><ol><li>基本数据类型的数组中存放数据，类数组中存放管理数据用的“指针”（初始为 <code>null</code>）。</li><li>对于类数组，修改 <code>for-each</code> 语句中 <code>x</code> 的值将会影响原数组中的值，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">I</span> </span>&#123;<span class="comment">// 须要写在外面</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">    I(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        I[] a = <span class="keyword">new</span> I[<span class="number">10</span>];<span class="comment">// 初始化：第一步</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            a[i] = <span class="keyword">new</span> I(i);<span class="comment">// 初始化：第二步</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(I x: a) &#123;</span><br><span class="line">            System.out.print(x.i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            x.i = <span class="number">0</span>;<span class="comment">// 原数组中的值被修改了</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span>(I x: a) &#123;</span><br><span class="line">            System.out.print(x.i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">0 1 2 3 4 5 6 7 8 9 </span></span><br><span class="line"><span class="comment">0 0 0 0 0 0 0 0 0 0 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>类的对象名仅仅为指向该对象的指针，赋值时也仅仅是指针的赋值，让两者管理同一个对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">    I(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        I a = <span class="keyword">new</span> I(<span class="number">128</span>);</span><br><span class="line">        I b = <span class="keyword">new</span> I(<span class="number">64</span>);</span><br><span class="line">        b = a;</span><br><span class="line">        a.i = <span class="number">32</span>;</span><br><span class="line">        System.out.println(b.i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">32</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="输出集合"><a href="#输出集合" class="headerlink" title="输出集合"></a>输出集合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">    I(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        I x = <span class="keyword">new</span> I(<span class="number">128</span>);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">I@6bc7c054</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">I</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">    I(<span class="keyword">int</span> i) &#123;</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        I x = <span class="keyword">new</span> I(<span class="number">128</span>);</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">128</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><p>基本用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 头文件 */</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 初始化 */</span></span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="comment">/* 插入 */</span></span><br><span class="line">        arr.add(<span class="number">16</span>);<span class="comment">// 在末尾插入值 16</span></span><br><span class="line">        arr.add(<span class="number">0</span>, <span class="number">64</span>);<span class="comment">// 在下标为 0 处插入值 32</span></span><br><span class="line">        <span class="comment">/* 修改 */</span></span><br><span class="line">        arr.set(<span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="comment">/* 删除 */</span></span><br><span class="line">        arr.remove(<span class="number">1</span>);<span class="comment">// 删去下标为 1 处的值 [32, 16] -&gt; [32]</span></span><br><span class="line">        arr.add(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        arr.remove(<span class="keyword">new</span> Integer(<span class="number">32</span>));<span class="comment">// 删除值为 32 的元素 [16, 32] -&gt; [16]</span></span><br><span class="line">        <span class="comment">/* 取值 */</span></span><br><span class="line">        System.out.println(arr.size());<span class="comment">// 取得 ArrayList 的大小</span></span><br><span class="line">        arr.add(<span class="number">32</span>);</span><br><span class="line">        System.out.println(arr.get(<span class="number">0</span>));<span class="comment">// 获取下标为 0 处的值</span></span><br><span class="line">        <span class="comment">/* 转数组 */</span></span><br><span class="line">        Integer[] intArray = <span class="keyword">new</span> Integer[arr.size()];<span class="comment">// 须要初始化</span></span><br><span class="line">        arr.toArray(intArray);</span><br><span class="line">        <span class="keyword">for</span>(Integer i: intArray) &#123;</span><br><span class="line">            System.out.println(i);<span class="comment">// 16\n32\n</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><p>基本用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p><code>null</code></p><p>containsKey</p><h5 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h5><h5 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line">Deque&lt;Integer&gt; dq = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();<span class="comment">// 不能接受基本数据类型</span></span><br><span class="line"></span><br><span class="line">System.out.println(dq.size());<span class="comment">// 大小</span></span><br><span class="line"></span><br><span class="line">dq.addLast(<span class="number">512</span>);<span class="comment">// 插入元素，失败返回异常</span></span><br><span class="line">dq.offerLast(<span class="number">1024</span>);<span class="comment">// 插入元素，失败返回 null</span></span><br><span class="line"></span><br><span class="line">System.out.println(dq.getFirst());<span class="comment">// 获取元素，失败返回异常</span></span><br><span class="line">System.out.println(dq.peekLast());<span class="comment">// 获取元素，失败返回 null</span></span><br><span class="line"></span><br><span class="line">System.out.println(dq.removeFirst());<span class="comment">// 删除元素，失败返回异常</span></span><br><span class="line">System.out.println(dq.pollLast());<span class="comment">// 删除元素，失败返回 null</span></span><br></pre></td></tr></table></figure><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 头文件 */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="comment">/* 数组排序 */</span></span><br><span class="line">Arrays.sort(a);<span class="comment">// 可以加两个参数表示排序区间，左闭右开</span></span><br><span class="line"><span class="comment">/* 自定义排序规则 */</span></span><br><span class="line">Arrays.sort(a, <span class="keyword">new</span> Comparator&lt;typename&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(typename a, typename b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.x == b.x) <span class="keyword">return</span> a.y &lt; b.y ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> a.x &lt; b.x ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h5><p><code>Math.random()</code> 得到一个 $[0,1)$ 的随机数。</p><h5 id="时间统计"><a href="#时间统计" class="headerlink" title="时间统计"></a>时间统计</h5><p><code>System.currentTimeMillis()</code> 作差可得代码段的运行时间（以毫秒为单位）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 第一种方式 */</span></span><br><span class="line">BufferedWriter out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line"><span class="keyword">long</span> st = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">    out.write(String.format(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)(Math.random() * <span class="number">100000</span>)));</span><br><span class="line">&#125;</span><br><span class="line">out.flush();</span><br><span class="line"><span class="keyword">long</span> et = System.currentTimeMillis();</span><br><span class="line">System.out.println(et - st);<span class="comment">// 1117 ms</span></span><br><span class="line"><span class="comment">/* 第二种方式 */</span></span><br><span class="line"><span class="keyword">long</span> st = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">    System.out.println((<span class="keyword">int</span>)(Math.random() * <span class="number">100000</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> et = System.currentTimeMillis();</span><br><span class="line">System.out.println(et - st);<span class="comment">// 2240 ms</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;版本问题&quot;&gt;&lt;a href=&quot;#版本问题&quot; class=&quot;headerlink&quot; title=&quot;版本问题&quot;&gt;&lt;/a&gt;版本问题&lt;/h3&gt;&lt;p&gt;写这篇笔记时 Oracle 官网上的最新的 JDK 版本是 Java 19，兼容 Apple Silicon，然而目前最常用</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://whz0325.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java" scheme="https://whz0325.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>抽象代数笔记</title>
    <link href="https://whz0325.github.io/abstract-algebra/"/>
    <id>https://whz0325.github.io/abstract-algebra/</id>
    <published>2022-11-09T14:13:22.000Z</published>
    <updated>2023-03-06T15:07:39.228Z</updated>
    
    <content type="html"><![CDATA[<p>按我们老师讲的内容来，可能不太全……</p><h3 id="一、代数系统"><a href="#一、代数系统" class="headerlink" title="一、代数系统"></a>一、代数系统</h3><ol><li>代数运算：封闭性。</li><li>代数运算的性质：<ol><li>交换律</li><li>结合律</li><li>幂等律：集合中每个元素都是幂等元（满足 $a*a=a$ 的 $a$）。【拓展】满足 $a^n=a$。</li><li>分配律：若 $a·(b+c)=a·b+a·c$ 表明“乘法”<strong>对</strong>“加法”满足分配率（左分配）。</li><li>吸收律：若 $a·(a+b)=a+(a·b)=a$ 表明二元运算 · 与 + 满足吸收率，$P\land (P\lor Q)=P\lor (P\land Q)=P$，$min(a,max(a,b))=max(a,min(a,b))=a$。</li><li>消去律：若 $a·c=b·c$ 则 $a=b$ 表明二元运算 * 满足消去律（区分：左消去/右消去）。</li></ol></li><li>代数系统：$(S,f_1,f_2,\dots)$，其中 $S$ 为非空集合，$f_1,f_2,\dots$ 为代数运算。</li></ol><h3 id="二、群的定义"><a href="#二、群的定义" class="headerlink" title="二、群的定义"></a>二、群的定义</h3><ol><li>半群 $(G,·)$：<ol><li>集合非空</li><li>代数运算（封闭）</li><li>满足结合律，如 $(G,·)$。</li></ol></li><li>群 $(G,·)$：<ol><li>半群</li><li>有<strong>单位元</strong></li><li>任意元素有<strong>逆元素</strong></li></ol></li><li>理解群的定义：<ol><li>单位元是群中唯一幂等元。</li><li>群中不可能有零元（半群可以）。【证明】反证法：群中只有一个元素时该元素被视为单位元，否则矛盾。</li><li>群一定满足<strong>消去律</strong>。【证明】两边同时乘被消去元素的逆元（左消去左乘，右消去右乘）。</li></ol></li><li>群的性质：<ol><li>群中单位元唯一，每个元素的逆元素唯一。</li><li>群的运算可以任意加括号。</li><li>$a^n$：规定 $a^0=1$，$a^{-n}=(a^n)^{-1}$。满足第一指数律（$a^m·a^n=a^{m+n}$）和第二指数律（$(a^m)^n=a^{mn}$），不一定满足第三指数律（$(a·b)^n=a^n·b^n$），因为不一定满足交换律。</li></ol></li><li>群的证明：<ol><li>群的证明可以简化为：有左壹，有左逆的半群（也可以简化为：有右壹，有右逆）（不可以简化为：一个左，一个右）。</li><li>群的证明可以等价为满足<strong>可除条件</strong>的半群：对任意 $a,b$，存在 $x,y$ 满足 $x·a=b$ 且 $a·y=b$。</li><li>群的证明可以简化为：满足<strong>消去律</strong>的<strong>有限</strong>半群。【证明】左边同时乘 $a$，由消去律反证得到的元素各不相同，因而满足可除条件。</li></ol></li><li>Abel 群：满足<strong>交换律</strong>的群，也称为交换群，充要条件为 $(a·b)^2=a^2·b^2$。【证明】展开后左边乘 $a^{-1}$，右边乘 $b^{-1}$，得 $b·a=a·b$。<ol><li>交换群的运算可以任意改变次序。</li><li>交换群满足<strong>第三指数律</strong>。</li><li>另：我们永远假定<strong>加法群是交换群</strong>。</li></ol></li></ol><h3 id="三、置换群"><a href="#三、置换群" class="headerlink" title="三、置换群"></a>三、置换群</h3><ol><li>置换：n 元置换，n 元恒等置换，置换共有 $n!$ 个（乘法原理）。</li><li>置换的乘法：先右后左<ol><li>满足结合律</li><li>有单位元：n 元恒等置换。</li><li>有逆元素。</li></ol></li><li>n 次<strong>对称群</strong>：所有 n 元置换及其上乘法。<ol><li>子群称为 n 次置换群。</li><li>所有的偶置换组成的群称为 n 次<strong>交代群</strong>。</li><li>所有的奇置换无法组成群。（奇置换的乘积为偶置换，不满足封闭性）</li></ol></li><li>轮换：一种简便写法，$(a_1 a_2\dots a_r)^{-1}=(a_r\dots a_2 a_1)$。</li><li>不相杂（不相交）：置换可以唯一地写成若干不相杂轮换的乘积。</li><li>对换：长度为 $2$ 的轮换，$(a_1 a_2\dots a_r)=(a_1 a_r)(a_1 a_{r-1})\dots (a_1 a_2)$。</li><li>奇偶性：等同于 $\sum_{j=1}^k (r_j-1)=n-k$ 的奇偶性。（$r_j$ 为每个轮换的长度，$k$ 为轮换个数，$n-k$ 为对换个数）。<ol><li>置换乘法积的奇偶性：与加法规律类似，相同得偶，相异得奇。</li><li>个数：奇偶置换个数相同，各 $\frac{n!}{2}$ 个。【证明】在每个偶置换前乘一个对换，必然得到一个奇置换，因为置换存在逆元，由消去率反证得得到的奇置换个数不少于偶置换，同理可以得到偶置换的个数不少于奇置换，及两者个数相等。</li></ol></li></ol><h3 id="子群及其陪集"><a href="#子群及其陪集" class="headerlink" title="子群及其陪集"></a>子群及其陪集</h3><ol><li>子群：集合为原集合的子集，运算与原集合相同。<ol><li>平凡子群：自身和单位元组成的子群。</li><li>充要条件：非空，封闭，有逆元。【证明】封闭有逆元可以得到有单位元。</li><li>子群与大群的关系：单位元相同，逆元相同。</li><li>充要条件2：非空，$a\in H,b\in H, ab^{-1}\in H$。【证明】$aa^{-1}=1\in H$，$1·a^{-1}\in H$。</li><li>充要条件3：非空，<strong>封闭</strong>，<strong>有限</strong>。（有限群只需验证封闭性）【证明】封闭性可以得到一个循环子集，则必定有相同元素，否则将会无限循环下去，据此得到逆元，随后得到单位元。</li></ol></li><li>循环群：由 $a$ 生成的循环子群记为 $(a)$。<ol><li>周期：$a^n=1$，最小的 $n$ 为 $a$ 的周期，规定单位元的周期为 $1$。</li><li>任意元素与其<strong>逆元</strong>具有<strong>相同的周期</strong>。</li><li>乘法循环群性质：$0,a,2a,\dots ,(n-1)a$ 各不相同，$ma=1$ 等价于 $n|m$，$sa=ta$ 等价于 $n|(s-t)$。</li><li>乘法循环群性质：$1,a,a^2,\dots ,a^{n-1}$ 各不相同，$a^m=1$ 等价于 $n|m$，$a^s=a^t$ 等价于 $n|(s-t)$。</li><li>无限循环群：生成元素只有 $a$ 和 $a^{-1}$ 两个。</li><li>n 元循环群：生成元素有 $\phi(n)$ 个。</li></ol></li><li>陪集</li></ol><p>另：【欧拉定理】$a$ 与 $n$ 互质，则 $a^{\phi(n)}=1(mod\ n)$。欧拉函数 $\phi(n)$ 为积性函数，当 $n$ 为质数时，$\phi(n)=n-1$。</p><p>完全剩余系与简化剩余系。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;按我们老师讲的内容来，可能不太全……&lt;/p&gt;
&lt;h3 id=&quot;一、代数系统&quot;&gt;&lt;a href=&quot;#一、代数系统&quot; class=&quot;headerlink&quot; title=&quot;一、代数系统&quot;&gt;&lt;/a&gt;一、代数系统&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;代数运算：封闭性。&lt;/li&gt;
&lt;li&gt;代数运</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://whz0325.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="抽象代数" scheme="https://whz0325.github.io/tags/%E6%8A%BD%E8%B1%A1%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 语法笔记</title>
    <link href="https://whz0325.github.io/python-notes/"/>
    <id>https://whz0325.github.io/python-notes/</id>
    <published>2022-10-15T13:34:05.000Z</published>
    <updated>2023-02-06T08:27:48.267Z</updated>
    
    <content type="html"><![CDATA[<p>内容全部摘自一个讲 Python 语法的网站，算是个速查吧。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li>注释：单行注释 <code>#</code>，多行注释用 <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code> 包裹。</li><li>缩进须严格一致，<code>\</code> 用于换行继续写。</li><li>字符串不区分单双引号，三引号可表示多行字符串。</li><li>使用 <code>r&quot;string\n&quot;</code> 可以让 <code>\</code> 不转译。</li><li>字符串取子串用 <code>[首下标:尾下标:步长]</code>，负数代表倒着数。</li><li>字符串加法代表连接，乘法代表重复。</li><li><code>print()</code> 默认换行，可指定 <code>print(element, end=&quot;&quot;)</code> 设置不换行。</li><li>导入：<code>import</code>、<code>from module import function</code>、<code>from module import *</code>。</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>类型名首字母大写，支持复数 <code>1+2j</code> 或 <code>complex(1, 2)</code>。</li><li><code>type()</code> 查询变量的类型，<code>isinstance(a, Int)</code> 会判断变量是否为指定类型（子类也算哦）。</li><li>删除对象 <code>del ver_1, ver_2</code></li><li><code>/</code> 得到浮点数，<code>//</code> 得到整数，<code>**</code> 是乘方。</li><li>列表类型 <code>List[&quot;&quot;, &quot;&quot;, &quot;&quot;]</code> 里啥都能塞。</li><li>技巧 <code>list = list[-1::-1]</code> 反转一个列表（步长 $-1$）。</li><li>元组类型 <code>Tuple(&quot;&quot;, &quot;&quot;, &quot;&quot;)</code> 内元素不能修改。</li><li>集合类型 <code>Set&#123;&quot;&quot;, &quot;&quot;, &quot;&quot;&#125;</code> 或 <code>set(&quot;&quot;)</code>，可以用 <code>-</code> 求差集，用 <code>&amp;</code> 求交集，用 <code>｜</code> 求并集，用 <code>^</code> 求不同元素。</li><li>字典类型 <code>Dictionary[&quot;location&quot;] = 1</code>，可用 <code>dictionary.keys()</code> 和 <code>dictionary.values()</code>，构造函数 <code>dict([(&quot;one&quot;, 1), (&quot;two&quot;, 2)])</code> 或 <code>dict(one = 1, two = 2)</code>。（感觉就是个 <code>map</code>【逃）</li><li>一些好用的函数：<code>hex(x)</code> 将整数转为十六进制字符串，<code>oct(x)</code> 将整数转为八进制字符串，<code>ord(x)</code> 将字符转为整数， <code>chr(x)</code> 将整数转为字符，<code>eval(str)</code> 计算字符串中的表达式……</li></ul><h3 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h3><p>一个有趣的东西。</p><ul><li>列表的例子：<code>[name.upper() for name in names if len(name) &gt; 3]</code></li><li>列表的例子：<code>[i for i in range(30) if i % 3 == 0]</code></li><li>字典的例子：<code>&#123;key: len(key) for key in strings&#125;</code></li><li>集合的例子：<code>&#123;i**2 for i in (1, 2, 3)&#125;</code></li><li>集合的例子：<code>&#123;x for x in &quot;abcdef&quot; if x not in &quot;abc&quot;&#125;</code></li><li>元组的例子：<code>(x for x in range(1, 10))</code></li></ul><hr><p>Python3 太强了，感觉再也不想用 C 了也说不定？明天接着写。</p><hr><p>然后就拖到后天了（</p><ul><li><code>f&quot;&#123;&#125;&quot;</code> 字符串前加 <code>f</code> 表示允许出现 <code>&#123;&#125;</code> 包裹的 Python 表达式。（顺便字符串前加的 <code>r</code> 是 raw 的缩写）</li><li>海象运算符 <code>:=</code>，目前觉得是在表达式中赋值，不太清楚到底怎么个用法。</li><li>Python 可以直接用关键字 <code>and</code>、<code>or</code>、<code>not</code>，如 <code>a and b</code>。</li><li>还有：<code>in</code> 和 <code>not in</code> 以及 <code>is</code> 和 <code>is not</code>（引用变量是否为同一个）。</li><li><code>id()</code> 函数用于获取对象内存地址。</li></ul><h3 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h3><p>（使用需要如 <code>math.modf(x)</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br></pre></td></tr></table></figure><p>基本函数 <code>abs(x)</code>、<code>ceil(x)</code>、<code>floor(x)</code>、<code>exp(x)</code>、<code>fabs(x)</code>、<code>log(x)</code>、<code>log10(x)</code>、<code>max(x1, x2, ... , xn)</code>、<code>min(x1, x2, ... , xn)</code>、<code>pow(x, y)</code>、<code>round(x[, n])</code>、<code>sqrt(x)</code>。</p><p><code>modf(x)</code> 用于返回整数部分和小数部分。</p><p><code>hypot(x, y)</code> 用于返回 $\sqrt{x^2+y^2}$。</p><p><code>degrees(x)</code> 弧度转角度，<code>radians(x)</code> 角度转弧度。</p><p>数学常量 <code>pi</code> 和 <code>e</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><p><code>choice(seq)</code> 在序列中随机挑选，<code>randrange([start, ]stop[, step])</code>，<code>random()</code> 生成 $[0,1)$ 范围内的随机数，<code>seed([x])</code>，<code>suffle(seq)</code> 将序列打乱，<code>uniform(x, y)</code> 随机生成 $[x, y]$ 范围内的实数。</p><hr><p>“字符串”到“集合”这几节先鸽着。</p><hr><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"><span class="keyword">elif</span> 表达式:</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"><span class="keyword">else</span>:</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">pass</span> <span class="comment"># 没用语句</span></span><br><span class="line"><span class="keyword">else</span>:</span><br></pre></td></tr></table></figure><p>压行：<code>while (not yahangdamie): print(&quot;压行啦！！！&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Python&quot;</span>]:</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="comment"># 0 -&gt; 4</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">9</span>):</span><br><span class="line">    <span class="comment"># 5 -&gt; 8</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">3</span>):</span><br><span class="line">    <span class="comment"># 0 3 6 9</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>)) <span class="comment"># [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function0</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;function0&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>传参时形式参数和实际参数指向同一个 $id$，内容改变后指向不同 $id$（用 <code>id(x)</code> 查看）。</li><li>函数内可变对象（如列表）改变会影响函数外。</li><li>可以设置参数默认值 <code>function0(author = &quot;whz0325&quot;)</code>，可以在调用时指定参数 <code>function0(name = &quot;whz&quot;, id = 325)</code>。</li></ul><p>不定长参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">*tmp</span>):</span> <span class="comment"># * 传入元组</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> tmp:</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">test(<span class="number">1.0</span>, <span class="number">2</span>, <span class="string">&quot;string&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>(<span class="params">**dic</span>):</span> <span class="comment"># ** 传入字典</span></span><br><span class="line">    <span class="keyword">for</span> (a, b) <span class="keyword">in</span> dic.items():</span><br><span class="line">        <span class="built_in">print</span>(a, b)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> dic.keys():</span><br><span class="line">        <span class="built_in">print</span>(key + <span class="string">&#x27;: &#x27;</span> + <span class="built_in">str</span>(dic[key]))</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> dic.values():</span><br><span class="line">        <span class="built_in">print</span>(value)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">test2(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>也可以 <code>def test2(a, b, *, c)</code>。</p><p>匿名函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><code>[left, right]</code>  取子串，下标 $0$ 开始，左开右闭，可省略某项，负数从 $-1$ 开始倒数。</li><li>C 语言中的转义字符也可以用：<code>\175</code> 表示八进制数，<code>\x6a</code> 表示十六进制数。</li><li>获取字符串的长度：<code>len(s)</code>。</li></ul><p>格式化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;whz0325&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s de age is forever %d&quot;</span> % (name, age))</span><br></pre></td></tr></table></figure><p><code>%e</code> 为科学计数法形式的浮点数，<code>%o</code> 为八进制，<code>%x</code> 为十六进制（<code>%X</code> 为大写）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pi = <span class="number">3.1415926</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%010.3f&quot;</span> % pi) <span class="comment"># &quot;000003.142&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%10.3f&quot;</span> % pi) <span class="comment"># &quot;     3.142&quot;</span></span><br></pre></td></tr></table></figure><p>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;whz0325&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.capitalize()) <span class="comment"># Whz0325</span></span><br><span class="line"><span class="built_in">print</span>(s.center(<span class="number">12</span>, <span class="string">&quot;_&quot;</span>)) <span class="comment"># __whz0325___</span></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&#x27;0&#x27;</span>)) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(s.count(<span class="string">&#x27;0&#x27;</span>, <span class="number">4</span>, <span class="built_in">len</span>(s))) <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span>(s.endswith(<span class="string">&#x27;32&#x27;</span>, <span class="number">0</span>, <span class="built_in">len</span>(s) - <span class="number">1</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;250&#x27;</span>, <span class="number">0</span>, <span class="built_in">len</span>(s))) <span class="comment"># -1</span></span><br><span class="line"><span class="built_in">print</span>(s.isalnum()) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(s.isalpha()) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(s.isdigit()) <span class="comment"># False</span></span><br><span class="line"><span class="comment"># isupper() islower()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join([<span class="string">&quot;whz0325&quot;</span>, <span class="string">&quot;and&quot;</span>, <span class="string">&quot;his&quot;</span>, <span class="string">&quot;friends&quot;</span>])) <span class="comment"># whz0325 and his friends</span></span><br><span class="line"><span class="comment"># max(s) min(s)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ababab&quot;</span>.replace(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="number">2</span>)) <span class="comment"># cdcdab</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>像数组一样的东西，可以搞二维列表</li><li><code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;].append(&#39;d&#39;)</code>。</li><li><code>del list[-2]</code> 删除倒数第二个元素（可以删除中间元素）。</li><li><code>max(list)</code> 和 <code>min(list)</code> 返回列表最值。</li></ul><p>排序和其它函数明天更。</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>坑着。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内容全部摘自一个讲 Python 语法的网站，算是个速查吧。&lt;/p&gt;
&lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;注释：单行注释 &lt;code&gt;#&lt;/code&gt;，多行注</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://whz0325.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Python" scheme="https://whz0325.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【洛谷 P1175】表达式求值</title>
    <link href="https://whz0325.github.io/lg-p1175/"/>
    <id>https://whz0325.github.io/lg-p1175/</id>
    <published>2022-09-19T14:38:34.000Z</published>
    <updated>2023-03-08T05:35:56.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个中缀表达式，输出它的后缀表达式及对后缀表达式求值时每一步的结果。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>基础题，转后缀的过程中用栈保存运算符，每当当前运算符与栈顶运算符相同（按从左到右顺序计算）或栈顶运算符优先级更高时，要将这些运算符优先计算。</p><p>注意特判阶乘。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 105</span></span><br><span class="line"><span class="keyword">char</span> s[N];<span class="keyword">int</span> len;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> tp,data;</span><br><span class="line">&#125; arr[N],tmp[N];<span class="keyword">int</span> sz=<span class="number">0</span>,tpsz=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">code</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span>(c) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">&#x27;^&#x27;</span>&amp;&amp;b==<span class="string">&#x27;^&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">code</span>(a)&gt;=<span class="built_in">code</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans*=n;</span><br><span class="line">        n=n*n;k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i].tp) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(<span class="keyword">char</span>)arr[i].data);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[i].data);</span><br><span class="line">        <span class="built_in">putchar</span>(i+<span class="number">1</span>&lt;sz?<span class="string">&#x27; &#x27;</span>:<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    std::stack&lt;<span class="keyword">char</span>&gt; op;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span>&lt;=s[i]&amp;&amp;s[i]&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            arr[sz++]=(type)&#123;<span class="number">0</span>,s[i]-<span class="string">&#x27;0&#x27;</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            op.<span class="built_in">push</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(op.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                arr[sz++]=(type)&#123;<span class="number">1</span>,op.<span class="built_in">top</span>()&#125;;op.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            op.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(!op.<span class="built_in">empty</span>()&amp;&amp;<span class="built_in">cmp</span>(op.<span class="built_in">top</span>(),s[i])) &#123;</span><br><span class="line">                arr[sz++]=(type)&#123;<span class="number">1</span>,op.<span class="built_in">top</span>()&#125;;</span><br><span class="line">                op.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            op.<span class="built_in">push</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!op.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur=op.<span class="built_in">top</span>();</span><br><span class="line">        <span class="keyword">if</span>(cur!=<span class="string">&#x27;(&#x27;</span>) arr[sz++]=(type)&#123;<span class="number">1</span>,cur&#125;;op.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">while</span>(sz&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">bool</span> find=<span class="literal">false</span>;tpsz=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!find&amp;&amp;arr[i].tp) &#123;</span><br><span class="line">                find=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">int</span> y=tmp[--tpsz].data;</span><br><span class="line">                <span class="keyword">int</span> x=tmp[--tpsz].data;</span><br><span class="line">                <span class="built_in"><span class="keyword">switch</span></span>(arr[i].data) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                        tmp[tpsz++]=(type)&#123;<span class="number">0</span>,x+y&#125;;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: </span><br><span class="line">                        tmp[tpsz++]=(type)&#123;<span class="number">0</span>,x-y&#125;;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: </span><br><span class="line">                        tmp[tpsz++]=(type)&#123;<span class="number">0</span>,x*y&#125;;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: </span><br><span class="line">                        tmp[tpsz++]=(type)&#123;<span class="number">0</span>,x/y&#125;;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;^&#x27;</span>: </span><br><span class="line">                        tmp[tpsz++]=(type)&#123;<span class="number">0</span>,<span class="built_in">qpow</span>(x,y)&#125;;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> tmp[tpsz++]=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tpsz;++i) arr[i]=tmp[i];sz=tpsz;</span><br><span class="line">        <span class="built_in">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个中缀表达式，输出它的后缀表达式及对后缀表达式求值时每一步的结果。&lt;/p&gt;
&lt;h3 id=&quot;算法分析&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="栈" scheme="https://whz0325.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>【CSP 2019】城市规划</title>
    <link href="https://whz0325.github.io/csp-201909-5/"/>
    <id>https://whz0325.github.io/csp-201909-5/</id>
    <published>2022-08-25T11:06:24.000Z</published>
    <updated>2022-08-25T11:19:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一颗 $n$ 个节点的树，其中给出 $m$ 个节点可选，要求从这 $m$ 个节点中选出 $k$ 个节点使得已选节点两两之间的距离和最小。</p><p>$n\le 5\times 10^4$，$m\le 10^4$，$k\le 100$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>树上 0/1 背包动态规划模版题，设 $f[i][j]$ 为访问节点 $i$ 时在其子树（不包括节点 $i$）中选择 $j$ 个节点时子树中所有边给予的最小贡献。若包含根节点的子树中选择了 $kk$ 个节点那么该子树根节点到其父节点的边所给予的贡献为 $w\times kk\times (k-kk)$（$w$ 为边权）。</p><p>注意计算顺序，DFS 后递推即可，时间长不写了第一次错写成记忆化搜索的完全背包了（汗）……</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> K 105</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span><span class="keyword">int</span> v,w;&#125;;</span><br><span class="line"><span class="keyword">int</span> imp[N];std::vector&lt;edge&gt; edges[N];</span><br><span class="line"><span class="keyword">int</span> n,k;ll f[N][K];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,sz=edges[x].<span class="built_in">size</span>();i&lt;sz;++i) &#123;</span><br><span class="line">        edge e=edges[x][i];<span class="keyword">if</span>(e.v==fa) <span class="keyword">continue</span>;<span class="built_in">dfs</span>(e.v,x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&gt;<span class="number">0</span>;--j) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> kk=j;kk&gt;=<span class="number">0</span>;--kk) &#123;</span><br><span class="line">                <span class="keyword">if</span>(kk) f[x][j]=std::<span class="built_in">min</span>(f[x][j],f[e.v][kk]+f[x][j-kk]+((k-kk)?(ll)e.w*kk*(k-kk):<span class="number">0</span>));</span><br><span class="line">                <span class="keyword">if</span>(imp[e.v]&amp;&amp;j&gt;kk) &#123;</span><br><span class="line">                    f[x][j]=std::<span class="built_in">min</span>(f[x][j],f[e.v][kk]+f[x][j-kk<span class="number">-1</span>]+(ll)e.w*(kk+<span class="number">1</span>)*(k-kk<span class="number">-1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;<span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);imp[t]=<span class="literal">true</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        edges[a].<span class="built_in">push_back</span>((edge)&#123;b,c&#125;);</span><br><span class="line">        edges[b].<span class="built_in">push_back</span>((edge)&#123;a,c&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);ll ans=f[<span class="number">1</span>][k];<span class="keyword">if</span>(imp[<span class="number">1</span>]&amp;&amp;k) ans=std::<span class="built_in">min</span>(ans,f[<span class="number">1</span>][k<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一颗 $n$ 个节点的树，其中给出 $m$ 个节点可选，要求从这 $m$ 个节点中选出 $k$ 个节点使得已选节点两两之</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="树形DP" scheme="https://whz0325.github.io/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
  <entry>
    <title>【TJOI 2010】阅读理解</title>
    <link href="https://whz0325.github.io/lg-p3879/"/>
    <id>https://whz0325.github.io/lg-p3879/</id>
    <published>2021-07-13T05:22:00.000Z</published>
    <updated>2021-07-13T05:35:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>$N$ 篇短文，$M$ 个询问，每次询问其在哪几篇短文中出现过。</p><p>$1\le M\le 10^4$，$1\le N\le 10^3$，每篇短文不超过 $5\times 10^3$ 个字符，每个单词不超过 $20$ 个字符。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>用 Trie 树，对 $N$ 篇短文建立字典树的空间复杂度不对（内存限制 128 MB​），因此对询问串建立字典树。</p><p>易错点：</p><ul><li><code>sscanf</code> 用 <code>%n</code> 取每次读取后的偏移量来持续向后读 <code>fgets</code> 得到的字符串。</li><li><code>scanf</code> 读取 $N$ 后 <code>fgets</code> 需要读一个空行，由于评测系统下换行符可能不一样，用 <code>getchar()</code> 会出错。</li><li>一个单词可能在一篇短文的多个单词中出现，需要判重。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ 200005</span></span><br><span class="line"><span class="keyword">int</span> n,m;std::vector&lt;<span class="keyword">int</span>&gt; ans[M];</span><br><span class="line"><span class="keyword">namespace</span> Trie &#123;</span><br><span class="line">    <span class="keyword">int</span> ch[SZ][<span class="number">26</span>],idx=<span class="number">1</span>;std::vector&lt;<span class="keyword">int</span>&gt; id[SZ];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),rt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> val=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(!ch[rt][val]) ch[rt][val]=++idx;</span><br><span class="line">            rt=ch[rt][val];</span><br><span class="line">        &#125;</span><br><span class="line">        id[rt].<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s),rt=<span class="number">1</span>;<span class="keyword">bool</span> error=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> val=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(!ch[rt][val]) &#123;error=<span class="literal">true</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            rt=ch[rt][val];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!error) <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,sz=id[rt].<span class="built_in">size</span>();i&lt;sz;++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx=id[rt][i];</span><br><span class="line">            <span class="keyword">if</span>(ans[idx].<span class="built_in">empty</span>()||ans[idx][ans[idx].<span class="built_in">size</span>()<span class="number">-1</span>]!=x) ans[id[rt][i]].<span class="built_in">push_back</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> ss[N][<span class="number">10005</span>],s[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="built_in">fgets</span>(ss[<span class="number">0</span>],<span class="number">5005</span>,stdin);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">fgets</span>(ss[i],<span class="number">5005</span>,stdin);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s);</span><br><span class="line">        Trie::<span class="built_in">insert</span>(s,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> *ptr=ss[i];<span class="keyword">int</span> offset=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> l;<span class="built_in">sscanf</span>(ptr,<span class="string">&quot;%d%n&quot;</span>,&amp;l,&amp;offset);ptr+=offset;</span><br><span class="line">        <span class="keyword">while</span>(l--) &#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(ptr,<span class="string">&quot;%s%n&quot;</span>,s,&amp;offset);ptr+=offset;</span><br><span class="line">            Trie::<span class="built_in">query</span>(s,i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz=ans[i].<span class="built_in">size</span>();<span class="keyword">bool</span> first=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;sz;++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(first) first=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;$N$ 篇短文，$M$ 个询问，每次询问其在哪几篇短文中出现过。&lt;/p&gt;
&lt;p&gt;$1\le M\le 10^4$，$1\le</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Trie树" scheme="https://whz0325.github.io/tags/Trie%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【音乐】我的梦</title>
    <link href="https://whz0325.github.io/dream-it-possible/"/>
    <id>https://whz0325.github.io/dream-it-possible/</id>
    <published>2019-07-28T11:21:00.000Z</published>
    <updated>2019-07-28T11:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<center>一直地一直地往前走</center><center>疯狂的世界</center><center>迎着痛把眼中所有梦</center><center>都交给时间</center><center>想飞就用心地去飞</center><center>谁不经历狼狈</center><center>我想我会忽略失望的灰</center><center>拥抱遗憾的美</center><center>我的梦说别停留等待</center><hr><center>就让光芒折射泪湿的瞳孔</center><center>映出心中最想拥有的彩虹</center><center>带我奔向那片有你的天空</center><center>因为你是我的梦</center><center>我的梦</center><hr><center>执着地勇敢地不回头</center><center>穿过了黑夜踏过了边界</center><center>路过雨路过风往前冲</center><center>总会有一天站在你身边</center><center>泪就让它往下坠</center><center>溅起伤口的美</center><center>哦别以为失去的最宝贵</center><center>才让今天浪费</center><center>我的梦说别停留等待</center><hr><center>就让光芒折射泪湿的瞳孔</center><center>映出心中最想拥有的彩虹</center><center>带我奔向那片有你的天空</center><center>因为你是我的梦</center><center>我的梦</center><center>我的梦</center><center>我的梦</center><hr><center>世界会怎么变化</center><center>都不是意外</center><center>记得用心去回答</center><center>命运的精彩</center><center>世界会怎么变化</center><center>都离不开爱</center><center>记得成长的对话</center><center>勇敢地说我不再等待</center><hr><center>就让光芒折射泪湿的瞳孔</center><center>映出心中最想拥有的彩虹</center><center>带我奔向那片有你的天空</center><center>因为你是我的梦</center><center>我的梦</center><center>我的梦</center><center>因为你是我的梦</center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;一直地一直地往前走&lt;/center&gt;

&lt;center&gt;疯狂的世界&lt;/center&gt;

&lt;center&gt;迎着痛把眼中所有梦&lt;/center&gt;

&lt;center&gt;都交给时间&lt;/center&gt;

&lt;center&gt;想飞就用心地去飞&lt;/center&gt;

&lt;center&gt;谁</summary>
      
    
    
    
    <category term="音乐" scheme="https://whz0325.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
  <entry>
    <title>【网络流24题】火星探险问题</title>
    <link href="https://whz0325.github.io/network-flow-mars/"/>
    <id>https://whz0325.github.io/network-flow-mars/</id>
    <published>2019-05-03T03:38:00.000Z</published>
    <updated>2019-05-03T09:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定 $p\times q$ 个位置，每个位置可能平坦无障碍、有障碍或有石块，$n$ 个探测车从左上角 $(1,1)$ 出发，每次只能往右或往下走，到达 $(q,p)$，输出使采集岩石最多时每辆车的行走方案。</p><p>$n,p,q\le 35$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>难点在于如何表示取走石块，将每个点拆点为 $x$ 和 $x’$，$x\to x’$ 连接一条容量为 $1$ 权值为 $-1$ 的边，$x\to x’$ 连接一条容量为无穷大权值为 $0$ 的边即可，最后跑最小费用最大流。</p><p>注意费用流的反向边。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2505</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 5005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span><span class="keyword">int</span> v,c,f,w;&#125; edges[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],nxt[M&lt;&lt;<span class="number">1</span>],idx=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;idx=<span class="number">0</span>;<span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(head));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> c,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    edges[idx]=(edge)&#123;v,c,<span class="number">0</span>,w&#125;;nxt[idx]=head[u];head[u]=idx++;</span><br><span class="line">    edges[idx]=(edge)&#123;u,<span class="number">0</span>,<span class="number">0</span>,-w&#125;;nxt[idx]=head[v];head[v]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d[N],inq[N],a[N],pa[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> &amp;cost)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(d));d[s]=<span class="number">0</span>;inq[s]=<span class="literal">true</span>;</span><br><span class="line">    std::queue&lt;<span class="keyword">int</span>&gt; q;q.<span class="built_in">push</span>(s);a[s]=INF;pa[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();inq[x]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];~i;i=nxt[i]) &#123;</span><br><span class="line">            edge &amp;e=edges[i];</span><br><span class="line">            <span class="keyword">if</span>(e.c&gt;e.f&amp;&amp;d[e.v]&gt;d[x]+e.w) &#123;</span><br><span class="line">                d[e.v]=d[x]+e.w;pa[e.v]=i;</span><br><span class="line">                a[e.v]=std::<span class="built_in">min</span>(a[x],e.c-e.f);</span><br><span class="line">                <span class="keyword">if</span>(!inq[e.v]) &#123;q.<span class="built_in">push</span>(e.v);inq[e.v]=<span class="literal">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[t]==INF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> u=t;cost+=a[t]*d[t];</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        edges[pa[u]].f+=a[t];</span><br><span class="line">        edges[pa[u]^<span class="number">1</span>].f-=a[t];</span><br><span class="line">        <span class="keyword">if</span>(u==s) <span class="keyword">break</span>;u=edges[pa[u]^<span class="number">1</span>].v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">SPFA</span>(s,t,ans));</span><br><span class="line">    <span class="keyword">return</span> -ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,p,q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=head[x];~i;i=nxt[i]) &#123;</span><br><span class="line">        edge &amp;e=edges[i];</span><br><span class="line">        <span class="keyword">if</span>(e.f&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(e.v&lt;x) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,rt,(e.v==x-q*p+<span class="number">1</span>)?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">            --e.f;<span class="built_in">dfs</span>(e.v,rt);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;p,&amp;q);<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> state;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;state);</span><br><span class="line">            <span class="keyword">if</span>(state==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">addEdge</span>(<span class="number">1</span>+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,INF,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(state==<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">addEdge</span>(<span class="number">1</span>+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                <span class="built_in">addEdge</span>(<span class="number">1</span>+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,INF,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i!=q) <span class="built_in">addEdge</span>(<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+i*p+j,INF,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(j!=p) <span class="built_in">addEdge</span>(<span class="number">1</span>+q*p+(i<span class="number">-1</span>)*p+j,<span class="number">1</span>+(i<span class="number">-1</span>)*p+j+<span class="number">1</span>,INF,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">addEdge</span>(<span class="number">1</span>,<span class="number">2</span>,n,<span class="number">0</span>);<span class="built_in">addEdge</span>(<span class="number">1</span>+(p*q*<span class="number">2</span>),<span class="number">1</span>+(p*q*<span class="number">2</span>)+<span class="number">1</span>,n,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">1</span>,<span class="number">1</span>+(q*p*<span class="number">2</span>)+<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">dfs</span>(<span class="number">1</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定 $p\times q$ 个位置，每个位置可能平坦无障碍、有障碍或有石块，$n$ 个探测车从左上角 $(1,1)$ 出发</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="费用流" scheme="https://whz0325.github.io/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>【NOI 2010】能量采集</title>
    <link href="https://whz0325.github.io/noi-2010-energy/"/>
    <id>https://whz0325.github.io/noi-2010-energy/</id>
    <published>2019-05-03T01:55:00.000Z</published>
    <updated>2021-06-16T15:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>栋栋有一块长方形的地，他在地上种了一种能量植物，这种植物可以采集太阳光的能量。在这些植物采集能量后，栋栋再使用一个能量汇集机器把这些植物采集到的能量汇集到一起。</p><p>栋栋的植物种得非常整齐，一共有 $n$ 列，每列有 $m$ 棵，植物的横竖间距都一样，因此对于每一棵植物，栋栋可以用一个坐标 $(x,y)$ 来表示，其中 $x$ 的范围是 $1$ 至 $n$，表示是在第 $x$ 列，$y$ 的范围是 $1$ 至 $m$，表示是在第 $x$ 列的第 $y$ 棵。</p><p>由于能量汇集机器较大，不便移动，栋栋将它放在了一个角上，坐标正好是 $(0,0)$。</p><p>能量汇集机器在汇集的过程中有一定的能量损失。如果一棵植物与能量汇集机器连接而成的线段上有k棵植物，则能 量的损失为 $2k+1$。例如，当能量汇集机器收集坐标为 $(2,4)$ 的植物时，由于连接线段上存在一棵植物 $(1,2)$，会产生 $3$ 的能量损失。注意，如果一棵植物与能量汇集机器连接的线段上没有植物，则能量损失为 $1$。现在要计算总的能量损失。</p><p>$1\le n,m\le 100,000$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>首先从 $(0,0)$ 到 $(x,y)$ 路径上的格点个数为 $gcd(x,y)-1$，因为每走 $(\frac{x}{gcd(x,y)},\frac{y}{gcd(x,y)})$ 就会有一个格点，而不包括端点。</p><p>所以问题所求即 $\sum_{i=1}^{n}\sum_{j=1}^m(2(gcd(i,j)-1)+1)=\sum_{i=1}^{n}\sum_{j=1}^m(2gcd(i,j)-1)$。</p><p>做法一：莫比乌斯反演</p><p>将式子转化一下变成 $2\sum_{i=1}^n\sum_{j=1}^mgcd(i,j)-n\times m$，考虑用莫比乌斯反演推出 $\sum_{i=1}^n\sum_{j=1}^mgcd(i,j)$ 的值。</p><p>枚举 $gcd(i,j)$ 的值得到 $\sum_{g=1}^{min{n,m}}g\sum_{i=1}^n\sum_{j=1}^m[gcd(i,j)=g]=\sum_{g=1}^{min{n,m}}g\sum_{i=1}^\frac{n}{g}\sum_{j=1}^\frac{m}{g}[gcd(i,j)=1]$。</p><p>莫比乌斯反演得原式等于 $\sum_{g=1}^{min{n,m}}g\sum_{i=1}^\frac{n}{g}\sum_{j=1}^\frac{m}{g}\sum_{d|gcd(i,j)}\mu(d)=\sum_{g=1}^{min{n,m}}g\sum_{i=1}^\frac{n}{g}\sum_{j=1}^\frac{m}{g}\sum_{d|i且 d|j}\mu(d)$。</p><p>枚举 $d$ 的值得到 $\sum_{g=1}^{min{n,m}}g\sum_{d=1}^{\lfloor\frac{min{n,m}}{g}\rfloor}\mu(d)\lfloor\frac{n}{gd}\rfloor\lfloor\frac{n}{gd}\rfloor$，然后我到这里就不会推了？？？</p><p>其实这里就可以直接算了，根据调和级数，时间复杂度大约是 $O(n\ln{n})$。注意初始化 $mu[1]=1$。</p><p>做法二：容斥原理</p><p>洛谷题解上还有一种高妙的做法：容斥原理。</p><p>设 $f[x]$ 表示 $i\in[1,n],j\in[1,m]$ 时 $gcd(i,j)=x$ 的个数，则 $f[x]=\lfloor\frac{n}{x}\rfloor\times\lfloor\frac{m}{x}\rfloor$，然而这里面还可能包括 $gcd(i,j)=2x$、$gcd(i,j)=3x$ 之类的情况，这样只需再枚举 $x$ 的倍数，把这些情况减去即可。</p><p>由于要确保之前的情况已经计算过，因此需要倒序求。</p><p>根据调和级数，时间复杂度为 $O(n\ln n)$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>做法一：莫比乌斯反演</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">int</span> p[N],mu[N],v[N],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!v[i]) &#123;p[cnt++]=i;mu[i]=<span class="number">-1</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*p[j]&lt;=n;++j) &#123;</span><br><span class="line">            v[i*p[j]]=p[j];</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>) &#123;</span><br><span class="line">                mu[i*p[j]]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> mu[i*p[j]]=-mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    ll ans=<span class="number">0</span>;<span class="built_in">sieve</span>(std::<span class="built_in">min</span>(n,m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> g=<span class="number">1</span>;g&lt;=std::<span class="built_in">min</span>(n,m);++g) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> d=<span class="number">1</span>;g*d&lt;=std::<span class="built_in">min</span>(n,m);++d) &#123;</span><br><span class="line">            ans+=(ll)g*mu[d]*(n/(g*d))*(m/(g*d));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ans&lt;&lt;<span class="number">1</span>)-(ll)n*m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做法二：容斥原理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line">ll f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=std::<span class="built_in">min</span>(n,m);i&gt;=<span class="number">1</span>;--i) &#123;</span><br><span class="line">        f[i]=(ll)(n/i)*(m/i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=(i&lt;&lt;<span class="number">1</span>);j&lt;=std::<span class="built_in">min</span>(n,m);j+=i) f[i]-=f[j];</span><br><span class="line">        ans+=f[i]*((i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;栋栋有一块长方形的地，他在地上种了一种能量植物，这种植物可以采集太阳光的能量。在这些植物采集能量后，栋栋再使用一个能量汇集机</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="容斥原理" scheme="https://whz0325.github.io/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
    <category term="莫比乌斯反演" scheme="https://whz0325.github.io/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>【ZJOI 2007】报表统计</title>
    <link href="https://whz0325.github.io/zjoi-2007-form/"/>
    <id>https://whz0325.github.io/zjoi-2007-form/</id>
    <published>2019-05-02T09:23:00.000Z</published>
    <updated>2019-05-02T09:31:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>维护一个初始长度为 $n$ 的非负整数序列，支持一下三种操作：</p><ul><li>在<strong>初始</strong>第 $i$ 个整数后面插入一个整数，若<strong>初始</strong>第 $i$ 个整数后面已经插入过其它整数，则将该整数插入到这些整数的最后面。</li><li>查询整个序列中相邻两个元素之间差值的最小值。</li><li>查询整个序列中任意两个元素之间差值的最小值。</li></ul><p>$n,m\le 500000$，序列内的整数不超过 $5\times 10^8$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>水题我都不会写。。。</p><p>对于每个初始整数及它后面插入的数放在一起维护，记录每段左右两端的值，由于相邻两个元素可能会变化，因此使用可重集合维护，第二种询问维护序列中所有整数的集合，在每次插入时直接二分与它最接近的两个整数更新答案即可。</p><p>时间复杂度为 $O(nlog_2n)$，卡常数。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></span><br><span class="line">std::set&lt;<span class="keyword">int</span>&gt; s;std::map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;<span class="keyword">int</span> lval[N],rval[N],minsortgap=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gap_insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mp.<span class="built_in">find</span>(x)==mp.<span class="built_in">end</span>()) mp[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> ++mp[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gap_erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(!(--mp[x])) mp.<span class="built_in">erase</span>(mp.<span class="built_in">find</span>(x));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sortgap_insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    std::set&lt;<span class="keyword">int</span>&gt;::iterator it=s.<span class="built_in">lower_bound</span>(x),is=s.<span class="built_in">upper_bound</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(it!=s.<span class="built_in">end</span>()) minsortgap=std::<span class="built_in">min</span>(minsortgap,*it-x);</span><br><span class="line">    <span class="keyword">if</span>(is!=s.<span class="built_in">begin</span>()) minsortgap=std::<span class="built_in">min</span>(minsortgap,x-*(--is));</span><br><span class="line">    s.<span class="built_in">insert</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);lval[i]=rval[i]=x;</span><br><span class="line">        <span class="keyword">if</span>(i<span class="number">-1</span>) <span class="built_in">gap_insert</span>(<span class="built_in">abs</span>(lval[i]-rval[i<span class="number">-1</span>]));</span><br><span class="line">        <span class="built_in">sortgap_insert</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">char</span> opt[<span class="number">100</span>];<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,opt);</span><br><span class="line">        <span class="keyword">if</span>(opt[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;i,&amp;k);</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n) &#123;</span><br><span class="line">                <span class="built_in">gap_erase</span>(<span class="built_in">abs</span>(lval[i+<span class="number">1</span>]-rval[i]));</span><br><span class="line">                <span class="built_in">gap_insert</span>(<span class="built_in">abs</span>(lval[i+<span class="number">1</span>]-k));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">gap_insert</span>(<span class="built_in">abs</span>(k-rval[i]));rval[i]=k;<span class="built_in">sortgap_insert</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt[<span class="number">4</span>]==<span class="string">&#x27;G&#x27;</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mp.<span class="built_in">begin</span>()-&gt;first);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,minsortgap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;维护一个初始长度为 $n$ 的非负整数序列，支持一下三种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;初始&lt;/stro</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="STL" scheme="https://whz0325.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>【APIO 2015】巴邻旁之桥</title>
    <link href="https://whz0325.github.io/apio-2015-bridge/"/>
    <id>https://whz0325.github.io/apio-2015-bridge/</id>
    <published>2019-05-02T04:46:00.000Z</published>
    <updated>2019-05-02T05:00:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一条东西走向的穆西河将巴邻旁市一分为二，分割成了区域 $A$ 和区域 $B$。</p><p>每一块区域沿着河岸都建了恰好 $1000000001$ 栋的建筑，每条岸边的建筑都从 $0$ 编号到 $1000000000$。相邻的每对建筑相隔 $1$ 个单位距离，河的宽度也是 $1$ 个单位长度。区域 $A$ 中的 $i$ 号建筑物恰好与区域 $B$ 中的 $i$ 号建筑物隔河相对。</p><p>城市中有 $N$ 个居民。第 $i$ 个居民的房子在区域 $P_i$ 的 $S_i$ 号建筑上，同时他的办公室坐落在 $Q_i$ 区域的 $T_i$ 号建筑上。一个居民的房子和办公室可能分布在河的两岸，这样他就必须要搭乘船只才能从家中去往办公室，这种情况让很多人都觉得不方便。为了使居民们可以开车去工作，政府决定建造不超过 $K$ 座横跨河流的大桥。</p><p>由于技术上的原因，每一座桥必须刚好连接河的两岸，桥梁必须严格垂直于河流，并且桥与桥之间不能相交。</p><p>当政府建造最多 $K$ 座桥之后，设 $D_i$ 表示第 $i$ 个居民此时开车从家里到办公室的最短距离。请帮助政府建造桥梁，使得 $D_1+D_2+\dots +D_N$ 最小。</p><p>$K=2$，$1\le N\le 100000$，$P_i$ 和 $Q_i$ 为字符 “A” 和 “B” 中的一个，$0\le S_i,T_i\le 1000000000$，同一栋建筑内可能有超过 $1$ 间房子或办公室（或二者的组合，即房子或办公室的数量同时大于等于 $1$）。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>当 $K=1$ 时很好算，列一下式子就会发现桥梁取在所有 $S_i$ 和 $T_i$ 的中位数处即可，这是个经典模型。</p><p>当 $K=2$ 时，我们可以发现，若 $S_i,T_i$ 之间有桥，则会通过这座桥，否则每个居民一定会选择距离自己两个端点最近的桥通过，也是距离两个端点所连成线段中点最近的桥。</p><p>按 $S_i,T_i$ 的中点对居民排序，则选择两座桥的居民分别形成一段连续的区间，枚举两个区间的分界点分别求出两边桥的位置即可。</p><p>问题转化为动态维护中位数以及中位数到其它点的距离，可以用权值线段树实现（离散化或动态开点）。</p><p>时间复杂度为 $O(nlog_2n)$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SGT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz[N&lt;&lt;<span class="number">3</span>];ll sum[N&lt;&lt;<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">SGT</span>() &#123;<span class="built_in">memset</span>(sz,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(sz));<span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(sum));&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d,<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r) &#123;sz[o]+=d;sum[o]+=d*s;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(o&lt;&lt;<span class="number">1</span>,l,mid,x,d,s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=x) <span class="built_in">modify</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x,d,s);</span><br><span class="line">            sz[o]=sz[o&lt;&lt;<span class="number">1</span>]+sz[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];sum[o]=sum[o&lt;&lt;<span class="number">1</span>]+sum[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=sz[o&lt;&lt;<span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">query</span>(o&lt;&lt;<span class="number">1</span>,l,mid,k);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,k-sz[o&lt;&lt;<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">querySz</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> sz[o];</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=mid) ans+=<span class="built_in">querySz</span>(o&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr) ans+=<span class="built_in">querySz</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">querySum</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr) <span class="keyword">return</span> sum[o];</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ql&lt;=mid) ans+=<span class="built_in">querySum</span>(o&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr) ans+=<span class="built_in">querySum</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; sgt[<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">type</span> &#123;</span><span class="keyword">int</span> s,t;&#125; loc[N];<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> type &amp;a,<span class="keyword">const</span> type &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.s+a.t&lt;b.s+b.t;&#125;</span><br><span class="line"><span class="keyword">int</span> h[N&lt;&lt;<span class="number">1</span>],sz=<span class="number">0</span>;<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> std::<span class="built_in">lower_bound</span>(h,h+sz,x)-h+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,n;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;k,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) &#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> p[<span class="number">2</span>],q[<span class="number">2</span>];<span class="keyword">int</span> s,t;<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%s%d&quot;</span>,p,&amp;s,q,&amp;t);</span><br><span class="line">            <span class="keyword">if</span>(p[<span class="number">0</span>]==q[<span class="number">0</span>]) ans+=<span class="built_in">abs</span>(t-s);</span><br><span class="line">            <span class="keyword">else</span> &#123;h[sz++]=s;h[sz++]=t;++ans;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(h,h+sz);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;++i) ans+=<span class="built_in">abs</span>(h[sz/<span class="number">2</span>]-h[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> p[<span class="number">2</span>],q[<span class="number">2</span>];<span class="keyword">int</span> s,t;<span class="built_in">scanf</span>(<span class="string">&quot;%s%d%s%d&quot;</span>,p,&amp;s,q,&amp;t);</span><br><span class="line">            <span class="keyword">if</span>(p[<span class="number">0</span>]==q[<span class="number">0</span>]) ans+=<span class="built_in">abs</span>(t-s);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                h[sz++]=s;h[sz++]=t;</span><br><span class="line">                loc[cnt++]=(type)&#123;p[<span class="number">0</span>]&lt;q[<span class="number">0</span>]?s:t,p[<span class="number">0</span>]&lt;q[<span class="number">0</span>]?t:s&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        std::<span class="built_in">sort</span>(loc,loc+cnt,cmp);</span><br><span class="line">        std::<span class="built_in">sort</span>(h,h+sz);sz=std::<span class="built_in">unique</span>(h,h+sz)-h;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i) &#123;</span><br><span class="line">            sgt[<span class="number">1</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].s),<span class="number">1</span>,loc[i].s);</span><br><span class="line">            sgt[<span class="number">1</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].t),<span class="number">1</span>,loc[i].t);</span><br><span class="line">        &#125;</span><br><span class="line">        ll res=<span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;++i) &#123;</span><br><span class="line">            sgt[<span class="number">0</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].s),<span class="number">1</span>,loc[i].s);</span><br><span class="line">            sgt[<span class="number">0</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].t),<span class="number">1</span>,loc[i].t);</span><br><span class="line">            sgt[<span class="number">1</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].s),<span class="number">-1</span>,loc[i].s);</span><br><span class="line">            sgt[<span class="number">1</span>].<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="built_in">id</span>(loc[i].t),<span class="number">-1</span>,loc[i].t);</span><br><span class="line">            <span class="keyword">int</span> ls=sgt[<span class="number">0</span>].<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,sz,i+<span class="number">1</span>),rs=sgt[<span class="number">1</span>].<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,sz,cnt-i<span class="number">-1</span>);</span><br><span class="line">            ll cur=(ll)sgt[<span class="number">0</span>].<span class="built_in">querySz</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="number">1</span>,ls)*h[ls<span class="number">-1</span>]-sgt[<span class="number">0</span>].<span class="built_in">querySum</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="number">1</span>,ls);</span><br><span class="line">            cur+=sgt[<span class="number">0</span>].<span class="built_in">querySum</span>(<span class="number">1</span>,<span class="number">1</span>,sz,ls,sz)-(ll)sgt[<span class="number">0</span>].<span class="built_in">querySz</span>(<span class="number">1</span>,<span class="number">1</span>,sz,ls,sz)*h[ls<span class="number">-1</span>];</span><br><span class="line">            cur+=(ll)sgt[<span class="number">1</span>].<span class="built_in">querySz</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="number">1</span>,rs)*h[rs<span class="number">-1</span>]-sgt[<span class="number">1</span>].<span class="built_in">querySum</span>(<span class="number">1</span>,<span class="number">1</span>,sz,<span class="number">1</span>,rs);</span><br><span class="line">            cur+=sgt[<span class="number">1</span>].<span class="built_in">querySum</span>(<span class="number">1</span>,<span class="number">1</span>,sz,rs,sz)-(ll)sgt[<span class="number">1</span>].<span class="built_in">querySz</span>(<span class="number">1</span>,<span class="number">1</span>,sz,rs,sz)*h[rs<span class="number">-1</span>];</span><br><span class="line">            res=std::<span class="built_in">min</span>(res,cur+cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(res^<span class="number">0x3f3f3f3f3f3f3f3f</span>LL)?ans+res:ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;一条东西走向的穆西河将巴邻旁市一分为二，分割成了区域 $A$ 和区域 $B$。&lt;/p&gt;
&lt;p&gt;每一块区域沿着河岸都建了恰好 </summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="线段树" scheme="https://whz0325.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【SHOI 2015】超能粒子炮·改</title>
    <link href="https://whz0325.github.io/bzoj-4591/"/>
    <id>https://whz0325.github.io/bzoj-4591/</id>
    <published>2019-05-01T00:28:00.000Z</published>
    <updated>2021-06-16T15:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有 $t$ 组数据，每组数据给定 $n,k$，求 $\sum_{i=0}^kC_n^i\mod 2333$ 的值。</p><p>$t\le 100000$，$n,k\le 10^{18}$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>感觉可能是套路题……</p><p>设 $f[n][k]=\sum_{i=0}^kC_n^i\mod 2333$，推一下式子。</p><p>由 Lucas 定理得 $f[n][k]=\sum_{i=0}^kC_n^i\mod 2333=\sum_{i=0}^kC_{n/p}^{i/p}C_{n\mod p}^{i\mod p}$，这里的 $/$ 表示的是下取整，$p$ 表示模数 $2333$。</p><p>看到 $\sum_{i=0}^k$ 和 $i/p$ 可以考虑数论分块，则 $f[n][k]$<br>$=\sum_{i=0}^{k/p-1}C_{n/p}^i\sum_{j=0}^{p-1}C_{n\mod p}^j+\sum_{i=0}^{k\mod p}C_{n/p}^{k/p}C_{n\mod p}^{i}$<br>$=f[n/p][k/p-1]\times f[n\mod p][p-1]+C_{n/p}^{k/p}\times f[n\mod p][k\mod p]$。</p><p>其中 $n,k\lt p$ 时 $f[n][k]$ 的值可以直接 $n^2$ 组合数递推枚举出来，$C_{n/p}^{k/p}$ 的值可以直接使用 Lucas 定理求出，而 $f[n/p][k/p-1]$ 的值直接递归下去即可。</p><p>时间复杂度是 $O(p^2+t\log_p{max{n,k}})$。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">2333</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;x+=y;<span class="keyword">return</span> x&gt;=p?x-p:x;&#125;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2505</span>][<span class="number">2505</span>],f[<span class="number">2505</span>][<span class="number">2505</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Lucas</span><span class="params">(ll n,ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;p&amp;&amp;k&lt;p) <span class="keyword">return</span> c[n][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Lucas</span>(n/p,k/p)*c[n%p][k%p]%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(ll n,ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;p&amp;&amp;k&lt;p) <span class="keyword">return</span> f[n][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">inc</span>(<span class="built_in">calc</span>(n/p,k/p<span class="number">-1</span>)*f[n%p][p<span class="number">-1</span>]%p,f[n%p][k%p]*<span class="built_in">Lucas</span>(n/p,k/p)%p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    c[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;p;++i) &#123;</span><br><span class="line">        c[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;++j) c[i][j]=<span class="built_in">inc</span>(c[i<span class="number">-1</span>][j<span class="number">-1</span>],c[i<span class="number">-1</span>][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;++i) &#123;</span><br><span class="line">        f[i][<span class="number">0</span>]=c[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;p;++j) f[i][j]=<span class="built_in">inc</span>(f[i][j<span class="number">-1</span>],c[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        ll n,k;<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2333</span>&amp;&amp;k&lt;<span class="number">2333</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[n][k]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">calc</span>(n,k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;有 $t$ 组数据，每组数据给定 $n,k$，求 $\sum_{i=0}^kC_n^i\mod 2333$ 的值。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="动态规划" scheme="https://whz0325.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Lucas定理" scheme="https://whz0325.github.io/tags/Lucas%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【国家集训队 2011】礼物</title>
    <link href="https://whz0325.github.io/nt-2011-gift/"/>
    <id>https://whz0325.github.io/nt-2011-gift/</id>
    <published>2019-04-29T02:56:00.000Z</published>
    <updated>2019-04-30T06:12:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有 $n$ 件礼物，打算送给 $m$ 个人，其中送给第 $i$ 个人的礼物数量为 $w_i$，求送出礼物的方案数，输出答案模 $p$ 的结果，无解输出 $Impossible$。</p><p>设 $p=p_1^{c_1}p_2^{c_2}p_3^{c_3}\dots p_t^{c_t}$，$p_i$ 为质数。$1\le n\le 10^9$，$1\le m\le 5$，$1\le p_i^{c_i}\le 10^5$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>以为是水题，看来我还是 naive……</p><p>首先不难发现答案就是 $C_n^{w_1}C_{n-w_1}^{w_2}\dots C_{n-w_1-w_2-\dots w_{m-1}}^{w_m}$，考虑如何计算这个式子。</p><p>$m$ 比较小，直接枚举计算每个组合数的值乘起来就是最终的答案，由于 $n$ 较大，$p$ 不一定为质数，每个组合数的值看起来不那么好算。</p><p>考虑 ExLucas 定理？由于 Lucas 定理的前提是模数为质数，而每个质因子上的指数可能大于 $1$，因此无法分解模数后 Lucas 定理再使用中国剩余定理合并。</p><p>这样 Lucas 定理的部分就只能直接算了，还是考虑分解模数然后用中国剩余定理合并，要保证数与模数互质才能用扩展欧几里得算法求出该数的逆元套用组合数公式，所以把阶乘中的 $p_i$ 提取出来，同时计算 $n!\mod p_i^{k_i}$ 剩下的部分。</p><p>记 $s_i=p_i^{k_i}$，可以将 $n!$ 分解一下，有 $\lfloor\frac{n}{p_i}\rfloor$ 个数是 $p_i$ 的倍数，这部分将他们都除以 $p_i$ 后就变成了 $\lfloor\frac{n}{p_i}\rfloor!$，是原问题的子问题，递归下去就可以了。剩下的不为 $p_i$ 倍数的部分应该怎么算呢？可以发现一个性质，那就是每 $s_i$ 个数（包含 $p_i$ 的倍数）中剩下的数乘积为定值，求出多少这样的块，乘方一下然后对后面不满的块单独计算就好了。</p><p>时间复杂度大概是 $O(5\times 20^2\times 10^5)$，不太好分析，总之肯定能过的。</p><p>参考题解：<a href="https://blog.csdn.net/clover_hxy/article/details/52250440">CSDN</a>。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">25</span>],c[<span class="number">25</span>],s[<span class="number">25</span>],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> p)</span> </span>&#123;x+=y;<span class="keyword">return</span> x&gt;=p?x-p:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans=(ll)ans*n%p;</span><br><span class="line">        n=(ll)n*n%p;k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;x=<span class="number">1</span>;y=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="built_in">exgcd</span>(b,a%b,y,x);y-=a/b*x;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> p)</span> </span>&#123;<span class="keyword">int</span> x,y;<span class="built_in">exgcd</span>(a,p,x,y);<span class="keyword">return</span> (x%p+p)%p;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=s[i];++j) <span class="keyword">if</span>(j%p[i]) ans=(ll)ans*j%s[i];</span><br><span class="line">    ans=<span class="built_in">qpow</span>(ans,n/s[i],s[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=n/s[i]*s[i]+<span class="number">1</span>;j&lt;=n;++j) <span class="keyword">if</span>(j%p[i]) ans=(ll)ans*j%s[i];</span><br><span class="line">    <span class="keyword">return</span> (ll)ans*<span class="built_in">calc</span>(n/p[i],i)%s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">int</span> k=<span class="number">0</span>,a=<span class="built_in">calc</span>(n,i),b=<span class="built_in">calc</span>(m,i),c=<span class="built_in">calc</span>(n-m,i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=n;j;j/=p[i]) k+=j/p[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=m;j;j/=p[i]) k-=j/p[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=n-m;j;j/=p[i]) k-=j/p[i];</span><br><span class="line">    <span class="keyword">return</span> (ll)a*<span class="built_in">rev</span>(b,s[i])%s[i]*<span class="built_in">rev</span>(c,s[i])%s[i]*<span class="built_in">qpow</span>(p[i],k,s[i])%s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mod,w[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">CRT</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) &#123;</span><br><span class="line">        res=<span class="built_in">inc</span>(res,(ll)<span class="built_in">rev</span>(mod/s[i],s[i])*(mod/s[i])%mod*<span class="built_in">C</span>(n,m,i)%mod,mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,sum=<span class="number">0</span>;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;mod,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,w+i);sum+=w[i];&#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;=n) &#123;</span><br><span class="line">        <span class="keyword">int</span> t=mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=t;++i) <span class="keyword">if</span>(t%i==<span class="number">0</span>) &#123;</span><br><span class="line">            p[++cnt]=i;s[cnt]=<span class="number">1</span>;<span class="keyword">while</span>(t%i==<span class="number">0</span>) &#123;++c[cnt];t/=i;s[cnt]*=i;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;ans=(ll)ans*<span class="built_in">CRT</span>(n,w[i])%mod;n-=w[i];&#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;Impossible&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;有 $n$ 件礼物，打算送给 $m$ 个人，其中送给第 $i$ 个人的礼物数量为 $w_i$，求送出礼物的方案数，输出答案模</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="中国剩余定理" scheme="https://whz0325.github.io/tags/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
    <category term="数论" scheme="https://whz0325.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="组合计数" scheme="https://whz0325.github.io/tags/%E7%BB%84%E5%90%88%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>【CTSC 2017】吉夫特</title>
    <link href="https://whz0325.github.io/ctsc-2017-gift/"/>
    <id>https://whz0325.github.io/ctsc-2017-gift/</id>
    <published>2019-04-28T01:49:00.000Z</published>
    <updated>2021-06-16T08:51:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个长度为 $n$ 的序列 $A$，求有多少个子序列满足所选下标集合为 ${b_1,b_2,\dots,b_k}$ 时 $a_{b_1}\ge a_{b_2}\ge\dots\ge a_{b_{k-1}}\ge a_{b_k}$ 且 $\prod_{i=2}^kC_{a_{i-1}}^{a_i}\equiv 1\pmod 2$，输出答案模 $10^9+7$ 的值。</p><p>$1\le n\le 211985$，$1\le a_i\le 233333$。所有的 $a_i$ 互不相同，也就是说不存在 $i,j$ 同时满足 $1\le i\lt j\le n$ 和 $a_i=a_j$。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>分析组合数连乘的式子，由于模数很小为 $2$，考虑使用 Lucas 定理求解。</p><p>这里需要想到，Lucas 定理拆分后的组合数中每一项只可能有四种情况，即 $C_0^0=C_1^0=C_1^1=1$ 或 $C_0^1=0$，这表明相邻两个数二进制拆分后不存在 $a_i$ 上的一位大于 $a_{i-1}$ 上对应的位，看作集合的话说明 $a_i$ 是 $a_{i-1}$ 的子集，也就是 $a_{i-1}\bigcap a_i=a_i$，同时也满足了这是一个不下降的子序列，因为一定有 $a_{i-1}\ge a_i$。</p><p>一个暴力的做法是考虑 DP，定义 $f[i]$ 表示处理以第 $i$ 个数为末尾的方案数，枚举上一个选择的数的下标 $j$ 即可转移。时间复杂度为 $O(n^2)$，期望得分 $70$ 分。</p><p>注意到前面选取的数一定是当前数超集（二进制状态下看作集合时），可以重新定义 DP 方程，设 $f[i][j]$ 表示前  $i$ 个数中，当前子序列末尾的数为 $j$（可以看作集合）时的方案数，转移只需要枚举子集就可以了，因为 $n$ 比 $a_i$ 的最大值要小，而 $233333\lt 2^{18}$，因此总的时间复杂度为 $O(3^{18})$。</p><p>很多网上的题解到这里就结束了，但这个复杂度显然是不靠谱的，可以通过拆位的方法对其进行优化。</p><p>枚举 $i$ 后可以将第一维省略掉，设 $f[x][y]$ 表示低 $9$ 位为 $y$ 且高 $9$ 位为 $x$ 的超集的方案数，这样在每次查询时就只需枚举低 $9$ 位的超集，每次修改时只需枚举高 $9$ 位的子集，时间复杂度为 $O(6^9)$。</p><blockquote><p>怎么枚举超集呢？只需枚举补集的子集再取补集就可以了。</p></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=(<span class="keyword">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span> </span>&#123;x+=y;<span class="keyword">if</span>(x&gt;=mod) x-=mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;x-=y;<span class="keyword">return</span> x&lt;<span class="number">0</span>?x+mod:x;&#125;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span>&lt;&lt;<span class="number">9</span>][<span class="number">1</span>&lt;&lt;<span class="number">9</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);<span class="keyword">int</span> x=(a&gt;&gt;<span class="number">9</span>),y=(a&amp;((<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;y=(y^(<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>);<span class="built_in">inc</span>(res,f[x][(<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> s=y;s;s=((s<span class="number">-1</span>)&amp;y)) <span class="built_in">inc</span>(res,f[x][s^((<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>)]);</span><br><span class="line">        y=(y^((<span class="number">1</span>&lt;&lt;<span class="number">9</span>)<span class="number">-1</span>));<span class="built_in">inc</span>(f[<span class="number">0</span>][y],res);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> s=x;s;s=((s<span class="number">-1</span>)&amp;x)) <span class="built_in">inc</span>(f[s][y],res);</span><br><span class="line">        <span class="built_in">inc</span>(ans,<span class="built_in">dec</span>(res,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个长度为 $n$ 的序列 $A$，求有多少个子序列满足所选下标集合为 ${b_1,b_2,\dots,b_k}$ 时 </summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="动态规划" scheme="https://whz0325.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="Lucas定理" scheme="https://whz0325.github.io/tags/Lucas%E5%AE%9A%E7%90%86/"/>
    
    <category term="位运算" scheme="https://whz0325.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>【清华集训 2016】组合数问题</title>
    <link href="https://whz0325.github.io/bzoj-4737/"/>
    <id>https://whz0325.github.io/bzoj-4737/</id>
    <published>2019-04-26T14:34:00.000Z</published>
    <updated>2019-04-26T14:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>$t$ 组数据，每组数据给定 $n,m$ 和 $k$，求对于所有的 $0\le i\le n$，$0\le j\le \min(i,m)$ 有多少对 $(i,j)$ 满足 $C_i^j$ 是 $k$ 的倍数。</p><p>$1\le n,m\le 10^{18}$，$1\le t,k\le 100$，且 $k$ 是一个质数。</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>问题所求即有多少对 $(i,j)$ 满足 $C_i^j%k=0$，观察到 $k$ 比较小且为质数，可以使用 Lucas 定理求解。</p><p>要使结果为 $0$，Lucas 定理的过程中一定有一部分乘积为 $0$，组合数 $C_n^k$ 当且仅当 $k\gt n$ 时值为 $0$，考虑数位 DP，直接求解比较复杂，将至少有一部分乘积为 $0$ 转化为总的方案数减去没有任何一部分为 $0$ 的方案数。</p><p>先考虑总的方案数如何计算，分成 $n\le m$ 和 $n\gt m$ 两部分，前半部分显然是 $1+2+\dots +(m+1)=\frac{(m+1)\times(m+2)}{2}$，后半部分显然每个 $n$ 有 $[0,m]$ 共 $m+1$ 种 $i$ 可用，共有 $n-m$ 个大于 $m$ 的 $n$，因此总的方案数为 $\frac{(m+1)(m+2)}{2}+(m+1)(n-m)$。</p><p>当 $k=1$ 时答案就是总的方案数，否则 Lucas 定理的过程中最多有 $log_2(10^{18})=60$ 位，则没有任何一部分为 $0$ 的方案数可以设 $f[i][0/1][0/1]$ 表示从左到右前 $i$ 位，$n$ 目前是/否达到上界以及 $m$ 目前是/否达到上界时没有任何一部分为 $0$ 的方案数，设计转移即可。</p><p>时间复杂度为 $O(60t)$。</p><p>注意由于每一部分的上界是一个余数，因此存在 $k\le n$ 但 $k$ 到达上界而 $n$ 没有的情况，这表明 $f[i][0][1]$ 是有意义的。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=(<span class="keyword">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;x+=y;<span class="keyword">return</span> x&gt;=mod?x-mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;x-=y;<span class="keyword">return</span> x&lt;<span class="number">0</span>?x+mod:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> (ll)x*y%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) ans=<span class="built_in">mul</span>(ans,n);</span><br><span class="line">        n=<span class="built_in">mul</span>(n,n);k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    m=std::<span class="built_in">min</span>(n,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">inc</span>(<span class="built_in">mul</span>(<span class="built_in">mul</span>(m+<span class="number">1</span>,m+<span class="number">2</span>),<span class="built_in">qpow</span>(<span class="number">2</span>,mod<span class="number">-2</span>)),(m+<span class="number">1</span>&lt;=n)?<span class="built_in">mul</span>(m+<span class="number">1</span>,n-m):<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> upn[<span class="number">65</span>],upm[<span class="number">65</span>],cnt=<span class="number">0</span>,f[<span class="number">65</span>][<span class="number">2</span>][<span class="number">2</span>];<span class="comment">//当前从高到低处理到第i位，n是否达到上界0/1，m是否达到上界0/1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,k;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;t,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        ll n,m;<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);m=std::<span class="built_in">min</span>(n,m);<span class="comment">//保证m不超过n</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="built_in">inc</span>(<span class="built_in">mul</span>(<span class="built_in">mul</span>((m+<span class="number">1</span>)%mod,(m+<span class="number">2</span>)%mod),<span class="built_in">qpow</span>(<span class="number">2</span>,mod<span class="number">-2</span>)),(m+<span class="number">1</span>&lt;=n)?<span class="built_in">mul</span>((m+<span class="number">1</span>)%mod,(n-m)%mod):<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        cnt=<span class="number">0</span>;<span class="keyword">while</span>(n||m) &#123;++cnt;upn[cnt]=n%k;n/=k;upm[cnt]=m%k;m/=k;&#125;</span><br><span class="line">        std::<span class="built_in">reverse</span>(upn+<span class="number">1</span>,upn+<span class="number">1</span>+cnt);std::<span class="built_in">reverse</span>(upm+<span class="number">1</span>,upm+<span class="number">1</span>+cnt);</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));f[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i) &#123;</span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(<span class="built_in">mul</span>(k,k+<span class="number">1</span>),<span class="built_in">qpow</span>(<span class="number">2</span>,mod<span class="number">-2</span>))));<span class="comment">//0~k-1 0~k-1</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">calc</span>(k<span class="number">-1</span>,upm[i]<span class="number">-1</span>)));<span class="comment">//0~k-1 0~upm-1</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">0</span>],<span class="built_in">calc</span>(upn[i]<span class="number">-1</span>,k<span class="number">-1</span>)));<span class="comment">//0~upn-1 0~k-1</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>],<span class="built_in">calc</span>(upn[i]<span class="number">-1</span>,upm[i]<span class="number">-1</span>)));<span class="comment">//0~upn-1 0~upm-1</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">1</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">0</span>][<span class="number">1</span>],k-upm[i]));<span class="comment">//0~k-1 upm</span></span><br><span class="line">            f[i][<span class="number">0</span>][<span class="number">1</span>]=<span class="built_in">inc</span>(f[i][<span class="number">0</span>][<span class="number">1</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>],upn[i]&gt;=upm[i]?upn[i]-upm[i]:<span class="number">0</span>));<span class="comment">//0~upn-1 upm</span></span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">1</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">0</span>],std::<span class="built_in">min</span>(upn[i]+<span class="number">1</span>,k)));<span class="comment">//upn 0~k-1</span></span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">0</span>]=<span class="built_in">inc</span>(f[i][<span class="number">1</span>][<span class="number">0</span>],<span class="built_in">mul</span>(f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>],std::<span class="built_in">min</span>(upn[i]+<span class="number">1</span>,upm[i])));<span class="comment">//upn 0~upm-1</span></span><br><span class="line">            f[i][<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">inc</span>(f[i][<span class="number">1</span>][<span class="number">1</span>],f[i<span class="number">-1</span>][<span class="number">1</span>][<span class="number">1</span>]*(upm[i]&lt;=upn[i]));<span class="comment">//upn upm</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="built_in">dec</span>(ans,<span class="built_in">inc</span>(<span class="built_in">inc</span>(<span class="built_in">inc</span>(f[cnt][<span class="number">0</span>][<span class="number">0</span>],f[cnt][<span class="number">0</span>][<span class="number">1</span>]),f[cnt][<span class="number">1</span>][<span class="number">0</span>]),f[cnt][<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;$t$ 组数据，每组数据给定 $n,m$ 和 $k$，求对于所有的 $0\le i\le n$，$0\le j\le \mi</summary>
      
    
    
    
    <category term="竞赛题解" scheme="https://whz0325.github.io/categories/%E7%AB%9E%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Lucas定理" scheme="https://whz0325.github.io/tags/Lucas%E5%AE%9A%E7%90%86/"/>
    
    <category term="数位DP" scheme="https://whz0325.github.io/tags/%E6%95%B0%E4%BD%8DDP/"/>
    
  </entry>
  
  <entry>
    <title>【音乐】山海</title>
    <link href="https://whz0325.github.io/mountain-and-sea/"/>
    <id>https://whz0325.github.io/mountain-and-sea/</id>
    <published>2019-04-22T11:45:00.000Z</published>
    <updated>2019-08-09T09:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<center>我看着天真的我自己</center><center>出现在没有我的故事里</center><center>等待着我的回应</center><center>一个为何至此的原因</center><hr><center>他明白 他明白</center><center>我给不起</center><center>于是转生向山里走去</center><center>他明白 他明白</center><center>我给不起</center><center>于是转生向大海走去</center><hr><center>我听着那少年的声音</center><center>在还有未来的过去</center><center>渴望着美好结局</center><center>却没能成为自己</center><center>却没能成为自己</center><hr><center>他明白 他明白</center><center>我给不起</center><center>于是转生向山里走去</center><center>他明白 他明白</center><center>我给不起</center><center>于是转生向大海走去</center><hr><center>他明白 他明白</center><center>我给不起</center><center>于是转身向山里走去</center><center>他明白 他明白</center><center>我给不起</center><center>于是转身向大海走去</center><center>于是转身向山里走去</center><center>他明白 他明白</center><center>我给不起</center><center>于是转身向大海走去</center><center>于是转身向大海走去</center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;我看着天真的我自己&lt;/center&gt;

&lt;center&gt;出现在没有我的故事里&lt;/center&gt;

&lt;center&gt;等待着我的回应&lt;/center&gt;

&lt;center&gt;一个为何至此的原因&lt;/center&gt;

&lt;hr&gt;
&lt;center&gt;他明白 他明白&lt;/center&gt;</summary>
      
    
    
    
    <category term="音乐" scheme="https://whz0325.github.io/categories/%E9%9F%B3%E4%B9%90/"/>
    
    
  </entry>
  
</feed>
